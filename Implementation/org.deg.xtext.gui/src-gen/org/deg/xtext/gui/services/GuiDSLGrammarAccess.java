/*
* generated by Xtext
*/
package org.deg.xtext.gui.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GuiDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UIDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAreaCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAreaCountAreaCountParserRuleCall_0_0 = (RuleCall)cAreaCountAssignment_0.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyPropertyParserRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		private final Assignment cUsedDescriptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUsedDescriptionsUsedDescriptionsParserRuleCall_3_0 = (RuleCall)cUsedDescriptionsAssignment_3.eContents().get(0);
		private final Assignment cRefinementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRefinementsRefinementParserRuleCall_4_0 = (RuleCall)cRefinementsAssignment_4.eContents().get(0);
		private final Assignment cDefinitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_5_0 = (RuleCall)cDefinitionsAssignment_5.eContents().get(0);
		private final Assignment cAreasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAreasAreaAssignmentParserRuleCall_6_0 = (RuleCall)cAreasAssignment_6.eContents().get(0);
		
		//UIDescription:
		//	areaCount=AreaCount typeDefinition=TypeDefinition property=Property? usedDescriptions+=UsedDescriptions*
		//	refinements+=Refinement* definitions+=Definition* areas+=AreaAssignment*;
		public ParserRule getRule() { return rule; }

		//areaCount=AreaCount typeDefinition=TypeDefinition property=Property? usedDescriptions+=UsedDescriptions*
		//refinements+=Refinement* definitions+=Definition* areas+=AreaAssignment*
		public Group getGroup() { return cGroup; }

		//areaCount=AreaCount
		public Assignment getAreaCountAssignment_0() { return cAreaCountAssignment_0; }

		//AreaCount
		public RuleCall getAreaCountAreaCountParserRuleCall_0_0() { return cAreaCountAreaCountParserRuleCall_0_0; }

		//typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }

		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_1_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_1_0; }

		//property=Property?
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_2_0() { return cPropertyPropertyParserRuleCall_2_0; }

		//usedDescriptions+=UsedDescriptions*
		public Assignment getUsedDescriptionsAssignment_3() { return cUsedDescriptionsAssignment_3; }

		//UsedDescriptions
		public RuleCall getUsedDescriptionsUsedDescriptionsParserRuleCall_3_0() { return cUsedDescriptionsUsedDescriptionsParserRuleCall_3_0; }

		//refinements+=Refinement*
		public Assignment getRefinementsAssignment_4() { return cRefinementsAssignment_4; }

		//Refinement
		public RuleCall getRefinementsRefinementParserRuleCall_4_0() { return cRefinementsRefinementParserRuleCall_4_0; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_5() { return cDefinitionsAssignment_5; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_5_0() { return cDefinitionsDefinitionParserRuleCall_5_0; }

		//areas+=AreaAssignment*
		public Assignment getAreasAssignment_6() { return cAreasAssignment_6; }

		//AreaAssignment
		public RuleCall getAreasAreaAssignmentParserRuleCall_6_0() { return cAreasAreaAssignmentParserRuleCall_6_0; }
	}

	public class RefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Refinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREFINEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConcreteRefinementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConcreteRefinementComponentRefinementParserRuleCall_1_0 = (RuleCall)cConcreteRefinementAssignment_1.eContents().get(0);
		private final Keyword cENDREFINEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Refinement:
		//	"REFINE" concreteRefinement=ComponentRefinement "END REFINE";
		public ParserRule getRule() { return rule; }

		//"REFINE" concreteRefinement=ComponentRefinement "END REFINE"
		public Group getGroup() { return cGroup; }

		//"REFINE"
		public Keyword getREFINEKeyword_0() { return cREFINEKeyword_0; }

		//concreteRefinement=ComponentRefinement
		public Assignment getConcreteRefinementAssignment_1() { return cConcreteRefinementAssignment_1; }

		//ComponentRefinement
		public RuleCall getConcreteRefinementComponentRefinementParserRuleCall_1_0() { return cConcreteRefinementComponentRefinementParserRuleCall_1_0; }

		//"END REFINE"
		public Keyword getENDREFINEKeyword_2() { return cENDREFINEKeyword_2; }
	}

	public class ComponentRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentRefinement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelRefinementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonRefinementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComponentRefinement:
		//	LabelRefinement | ButtonRefinement;
		public ParserRule getRule() { return rule; }

		//LabelRefinement | ButtonRefinement
		public Alternatives getAlternatives() { return cAlternatives; }

		//LabelRefinement
		public RuleCall getLabelRefinementParserRuleCall_0() { return cLabelRefinementParserRuleCall_0; }

		//ButtonRefinement
		public RuleCall getButtonRefinementParserRuleCall_1() { return cButtonRefinementParserRuleCall_1; }
	}

	public class ButtonRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeButtonKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cWithNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//ButtonRefinement:
		//	type="Button" " with name: " name=STRING properties=Properties?;
		public ParserRule getRule() { return rule; }

		//type="Button" " with name: " name=STRING properties=Properties?
		public Group getGroup() { return cGroup; }

		//type="Button"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"Button"
		public Keyword getTypeButtonKeyword_0_0() { return cTypeButtonKeyword_0_0; }

		//" with name: "
		public Keyword getWithNameKeyword_1() { return cWithNameKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//properties=Properties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_3_0() { return cPropertiesPropertiesParserRuleCall_3_0; }
	}

	public class LabelRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeLabelKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cWithNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//LabelRefinement:
		//	type="Label" " with name: " name=STRING properties=Properties?;
		public ParserRule getRule() { return rule; }

		//type="Label" " with name: " name=STRING properties=Properties?
		public Group getGroup() { return cGroup; }

		//type="Label"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"Label"
		public Keyword getTypeLabelKeyword_0_0() { return cTypeLabelKeyword_0_0; }

		//" with name: "
		public Keyword getWithNameKeyword_1() { return cWithNameKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//properties=Properties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_3_0() { return cPropertiesPropertiesParserRuleCall_3_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetPropertiesFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cPropertiesFileAssignment_1.eContents().get(0);
		
		//Property:
		//	"get properties from:" propertiesFile=STRING;
		public ParserRule getRule() { return rule; }

		//"get properties from:" propertiesFile=STRING
		public Group getGroup() { return cGroup; }

		//"get properties from:"
		public Keyword getGetPropertiesFromKeyword_0() { return cGetPropertiesFromKeyword_0; }

		//propertiesFile=STRING
		public Assignment getPropertiesFileAssignment_1() { return cPropertiesFileAssignment_1; }

		//STRING
		public RuleCall getPropertiesFileSTRINGTerminalRuleCall_1_0() { return cPropertiesFileSTRINGTerminalRuleCall_1_0; }
	}

	public class UsedDescriptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsedDescriptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionDescriptionTypeParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLocalNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLocalNameSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cLocalNameAssignment_2_1.eContents().get(0);
		
		//UsedDescriptions:
		//	"use: " description=DescriptionType (" as: " localName=STRING)?;
		public ParserRule getRule() { return rule; }

		//"use: " description=DescriptionType (" as: " localName=STRING)?
		public Group getGroup() { return cGroup; }

		//"use: "
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//description=DescriptionType
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//DescriptionType
		public RuleCall getDescriptionDescriptionTypeParserRuleCall_1_0() { return cDescriptionDescriptionTypeParserRuleCall_1_0; }

		//(" as: " localName=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//" as: "
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//localName=STRING
		public Assignment getLocalNameAssignment_2_1() { return cLocalNameAssignment_2_1; }

		//STRING
		public RuleCall getLocalNameSTRINGTerminalRuleCall_2_1_0() { return cLocalNameSTRINGTerminalRuleCall_2_1_0; }
	}

	public class DescriptionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescriptionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUIDescriptionImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DescriptionType:
		//	UIDescriptionImport | ComplexComponent;
		public ParserRule getRule() { return rule; }

		//UIDescriptionImport | ComplexComponent
		public Alternatives getAlternatives() { return cAlternatives; }

		//UIDescriptionImport
		public RuleCall getUIDescriptionImportParserRuleCall_0() { return cUIDescriptionImportParserRuleCall_0; }

		//ComplexComponent
		public RuleCall getComplexComponentParserRuleCall_1() { return cComplexComponentParserRuleCall_1; }
	}

	public class AreaCountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AreaCount");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAreaCountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAreaCountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAreaCountINTTerminalRuleCall_1_0 = (RuleCall)cAreaCountAssignment_1.eContents().get(0);
		
		//AreaCount:
		//	"Area count: " areaCount=INT;
		public ParserRule getRule() { return rule; }

		//"Area count: " areaCount=INT
		public Group getGroup() { return cGroup; }

		//"Area count: "
		public Keyword getAreaCountKeyword_0() { return cAreaCountKeyword_0; }

		//areaCount=INT
		public Assignment getAreaCountAssignment_1() { return cAreaCountAssignment_1; }

		//INT
		public RuleCall getAreaCountINTTerminalRuleCall_1_0() { return cAreaCountINTTerminalRuleCall_1_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConcreteDefitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConcreteDefitionComponentDefinitionParserRuleCall_1_0 = (RuleCall)cConcreteDefitionAssignment_1.eContents().get(0);
		private final Keyword cENDDEFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Definition:
		//	"DEF " concreteDefition=ComponentDefinition "END DEF";
		public ParserRule getRule() { return rule; }

		//"DEF " concreteDefition=ComponentDefinition "END DEF"
		public Group getGroup() { return cGroup; }

		//"DEF "
		public Keyword getDEFKeyword_0() { return cDEFKeyword_0; }

		//concreteDefition=ComponentDefinition
		public Assignment getConcreteDefitionAssignment_1() { return cConcreteDefitionAssignment_1; }

		//ComponentDefinition
		public RuleCall getConcreteDefitionComponentDefinitionParserRuleCall_1_0() { return cConcreteDefitionComponentDefinitionParserRuleCall_1_0; }

		//"END DEF"
		public Keyword getENDDEFKeyword_2() { return cENDDEFKeyword_2; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeDefinition:
		//	"type: " type=Type;
		public ParserRule getRule() { return rule; }

		//"type: " type=Type
		public Group getGroup() { return cGroup; }

		//"type: "
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWINDOWKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cINNERCOMPLEXKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Type:
		//	"WINDOW" | "INNERCOMPLEX";
		public ParserRule getRule() { return rule; }

		//"WINDOW" | "INNERCOMPLEX"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"WINDOW"
		public Keyword getWINDOWKeyword_0() { return cWINDOWKeyword_0; }

		//"INNERCOMPLEX"
		public Keyword getINNERCOMPLEXKeyword_1() { return cINNERCOMPLEXKeyword_1; }
	}

	public class UIDescriptionImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIDescriptionImport");
		private final Assignment cDescriptionNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDescriptionNameSTRINGTerminalRuleCall_0 = (RuleCall)cDescriptionNameAssignment.eContents().get(0);
		
		//UIDescriptionImport:
		//	descriptionName=STRING;
		public ParserRule getRule() { return rule; }

		//descriptionName=STRING
		public Assignment getDescriptionNameAssignment() { return cDescriptionNameAssignment; }

		//STRING
		public RuleCall getDescriptionNameSTRINGTerminalRuleCall_0() { return cDescriptionNameSTRINGTerminalRuleCall_0; }
	}

	public class ComplexComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexComponent");
		private final RuleCall cMultiselectionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ComplexComponent:
		//	Multiselection;
		public ParserRule getRule() { return rule; }

		//Multiselection
		public RuleCall getMultiselectionParserRuleCall() { return cMultiselectionParserRuleCall; }
	}

	public class MultiselectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiselection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDescriptionNameMultiselectionKeyword_0_0 = (Keyword)cDescriptionNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInputTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInputTypeSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cInputTypeAssignment_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Multiselection:
		//	descriptionName="Multiselection" ("<" inputType=STRING ">")?;
		public ParserRule getRule() { return rule; }

		//descriptionName="Multiselection" ("<" inputType=STRING ">")?
		public Group getGroup() { return cGroup; }

		//descriptionName="Multiselection"
		public Assignment getDescriptionNameAssignment_0() { return cDescriptionNameAssignment_0; }

		//"Multiselection"
		public Keyword getDescriptionNameMultiselectionKeyword_0_0() { return cDescriptionNameMultiselectionKeyword_0_0; }

		//("<" inputType=STRING ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//inputType=STRING
		public Assignment getInputTypeAssignment_1_1() { return cInputTypeAssignment_1_1; }

		//STRING
		public RuleCall getInputTypeSTRINGTerminalRuleCall_1_1_0() { return cInputTypeSTRINGTerminalRuleCall_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
	}

	public class AreaAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AreaAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAreaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAreaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAreaINTTerminalRuleCall_0_1_0 = (RuleCall)cAreaAssignment_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cElementsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cElementsSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cElementsAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cAreaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAreaAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAreaINTTerminalRuleCall_1_3_0 = (RuleCall)cAreaAssignment_1_3.eContents().get(0);
		
		//AreaAssignment:
		//	"Area:" area=INT "<-" elements+=STRING+ | elements+=STRING+ "->" "Area:" area=INT;
		public ParserRule getRule() { return rule; }

		//"Area:" area=INT "<-" elements+=STRING+ | elements+=STRING+ "->" "Area:" area=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Area:" area=INT "<-" elements+=STRING+
		public Group getGroup_0() { return cGroup_0; }

		//"Area:"
		public Keyword getAreaKeyword_0_0() { return cAreaKeyword_0_0; }

		//area=INT
		public Assignment getAreaAssignment_0_1() { return cAreaAssignment_0_1; }

		//INT
		public RuleCall getAreaINTTerminalRuleCall_0_1_0() { return cAreaINTTerminalRuleCall_0_1_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_2() { return cLessThanSignHyphenMinusKeyword_0_2; }

		//elements+=STRING+
		public Assignment getElementsAssignment_0_3() { return cElementsAssignment_0_3; }

		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_0_3_0() { return cElementsSTRINGTerminalRuleCall_0_3_0; }

		//elements+=STRING+ "->" "Area:" area=INT
		public Group getGroup_1() { return cGroup_1; }

		//elements+=STRING+
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }

		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_1_0_0() { return cElementsSTRINGTerminalRuleCall_1_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }

		//"Area:"
		public Keyword getAreaKeyword_1_2() { return cAreaKeyword_1_2; }

		//area=INT
		public Assignment getAreaAssignment_1_3() { return cAreaAssignment_1_3; }

		//INT
		public RuleCall getAreaINTTerminalRuleCall_1_3_0() { return cAreaINTTerminalRuleCall_1_3_0; }
	}

	public class ComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComponentDefinition:
		//	LabelDefinition | ButtonDefinition;
		public ParserRule getRule() { return rule; }

		//LabelDefinition | ButtonDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//LabelDefinition
		public RuleCall getLabelDefinitionParserRuleCall_0() { return cLabelDefinitionParserRuleCall_0; }

		//ButtonDefinition
		public RuleCall getButtonDefinitionParserRuleCall_1() { return cButtonDefinitionParserRuleCall_1; }
	}

	public class ButtonDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeButtonKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//ButtonDefinition:
		//	type="Button" " as " name=STRING properties=Properties?;
		public ParserRule getRule() { return rule; }

		//type="Button" " as " name=STRING properties=Properties?
		public Group getGroup() { return cGroup; }

		//type="Button"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"Button"
		public Keyword getTypeButtonKeyword_0_0() { return cTypeButtonKeyword_0_0; }

		//" as "
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//properties=Properties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_3_0() { return cPropertiesPropertiesParserRuleCall_3_0; }
	}

	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Properties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPropertyKeyKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertyKeyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyKeySTRINGTerminalRuleCall_1_1_0 = (RuleCall)cPropertyKeyAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTextKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTextAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInteractiontypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInteractiontypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInteractiontypeInteractiontypeParserRuleCall_3_1_0 = (RuleCall)cInteractiontypeAssignment_3_1.eContents().get(0);
		
		//Properties:
		//	":" ("propertyKey=" propertyKey=STRING)? ("text=" text=STRING)? ("interactiontype="
		//	interactiontype+=Interactiontype+)?;
		public ParserRule getRule() { return rule; }

		//":" ("propertyKey=" propertyKey=STRING)? ("text=" text=STRING)? ("interactiontype=" interactiontype+=Interactiontype+)?
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//("propertyKey=" propertyKey=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"propertyKey="
		public Keyword getPropertyKeyKeyword_1_0() { return cPropertyKeyKeyword_1_0; }

		//propertyKey=STRING
		public Assignment getPropertyKeyAssignment_1_1() { return cPropertyKeyAssignment_1_1; }

		//STRING
		public RuleCall getPropertyKeySTRINGTerminalRuleCall_1_1_0() { return cPropertyKeySTRINGTerminalRuleCall_1_1_0; }

		//("text=" text=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"text="
		public Keyword getTextKeyword_2_0() { return cTextKeyword_2_0; }

		//text=STRING
		public Assignment getTextAssignment_2_1() { return cTextAssignment_2_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_1_0() { return cTextSTRINGTerminalRuleCall_2_1_0; }

		//("interactiontype=" interactiontype+=Interactiontype+)?
		public Group getGroup_3() { return cGroup_3; }

		//"interactiontype="
		public Keyword getInteractiontypeKeyword_3_0() { return cInteractiontypeKeyword_3_0; }

		//interactiontype+=Interactiontype+
		public Assignment getInteractiontypeAssignment_3_1() { return cInteractiontypeAssignment_3_1; }

		//Interactiontype
		public RuleCall getInteractiontypeInteractiontypeParserRuleCall_3_1_0() { return cInteractiontypeInteractiontypeParserRuleCall_3_1_0; }
	}

	public class LabelDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeLabelKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//LabelDefinition:
		//	type="Label" " as " name=STRING properties=Properties?;
		public ParserRule getRule() { return rule; }

		//type="Label" " as " name=STRING properties=Properties?
		public Group getGroup() { return cGroup; }

		//type="Label"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"Label"
		public Keyword getTypeLabelKeyword_0_0() { return cTypeLabelKeyword_0_0; }

		//" as "
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//properties=Properties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_3_0() { return cPropertiesPropertiesParserRuleCall_3_0; }
	}

	public class InteractiontypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interactiontype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cChangeTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Interactiontype:
		//	"Click" | "ChangeText";
		public ParserRule getRule() { return rule; }

		//"Click" | "ChangeText"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Click"
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }

		//"ChangeText"
		public Keyword getChangeTextKeyword_1() { return cChangeTextKeyword_1; }
	}
	
	
	private final UIDescriptionElements pUIDescription;
	private final RefinementElements pRefinement;
	private final ComponentRefinementElements pComponentRefinement;
	private final ButtonRefinementElements pButtonRefinement;
	private final LabelRefinementElements pLabelRefinement;
	private final PropertyElements pProperty;
	private final UsedDescriptionsElements pUsedDescriptions;
	private final DescriptionTypeElements pDescriptionType;
	private final AreaCountElements pAreaCount;
	private final DefinitionElements pDefinition;
	private final TypeDefinitionElements pTypeDefinition;
	private final TypeElements pType;
	private final UIDescriptionImportElements pUIDescriptionImport;
	private final ComplexComponentElements pComplexComponent;
	private final MultiselectionElements pMultiselection;
	private final AreaAssignmentElements pAreaAssignment;
	private final ComponentDefinitionElements pComponentDefinition;
	private final ButtonDefinitionElements pButtonDefinition;
	private final PropertiesElements pProperties;
	private final LabelDefinitionElements pLabelDefinition;
	private final InteractiontypeElements pInteractiontype;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GuiDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUIDescription = new UIDescriptionElements();
		this.pRefinement = new RefinementElements();
		this.pComponentRefinement = new ComponentRefinementElements();
		this.pButtonRefinement = new ButtonRefinementElements();
		this.pLabelRefinement = new LabelRefinementElements();
		this.pProperty = new PropertyElements();
		this.pUsedDescriptions = new UsedDescriptionsElements();
		this.pDescriptionType = new DescriptionTypeElements();
		this.pAreaCount = new AreaCountElements();
		this.pDefinition = new DefinitionElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pType = new TypeElements();
		this.pUIDescriptionImport = new UIDescriptionImportElements();
		this.pComplexComponent = new ComplexComponentElements();
		this.pMultiselection = new MultiselectionElements();
		this.pAreaAssignment = new AreaAssignmentElements();
		this.pComponentDefinition = new ComponentDefinitionElements();
		this.pButtonDefinition = new ButtonDefinitionElements();
		this.pProperties = new PropertiesElements();
		this.pLabelDefinition = new LabelDefinitionElements();
		this.pInteractiontype = new InteractiontypeElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.deg.xtext.gui.GuiDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UIDescription:
	//	areaCount=AreaCount typeDefinition=TypeDefinition property=Property? usedDescriptions+=UsedDescriptions*
	//	refinements+=Refinement* definitions+=Definition* areas+=AreaAssignment*;
	public UIDescriptionElements getUIDescriptionAccess() {
		return pUIDescription;
	}
	
	public ParserRule getUIDescriptionRule() {
		return getUIDescriptionAccess().getRule();
	}

	//Refinement:
	//	"REFINE" concreteRefinement=ComponentRefinement "END REFINE";
	public RefinementElements getRefinementAccess() {
		return pRefinement;
	}
	
	public ParserRule getRefinementRule() {
		return getRefinementAccess().getRule();
	}

	//ComponentRefinement:
	//	LabelRefinement | ButtonRefinement;
	public ComponentRefinementElements getComponentRefinementAccess() {
		return pComponentRefinement;
	}
	
	public ParserRule getComponentRefinementRule() {
		return getComponentRefinementAccess().getRule();
	}

	//ButtonRefinement:
	//	type="Button" " with name: " name=STRING properties=Properties?;
	public ButtonRefinementElements getButtonRefinementAccess() {
		return pButtonRefinement;
	}
	
	public ParserRule getButtonRefinementRule() {
		return getButtonRefinementAccess().getRule();
	}

	//LabelRefinement:
	//	type="Label" " with name: " name=STRING properties=Properties?;
	public LabelRefinementElements getLabelRefinementAccess() {
		return pLabelRefinement;
	}
	
	public ParserRule getLabelRefinementRule() {
		return getLabelRefinementAccess().getRule();
	}

	//Property:
	//	"get properties from:" propertiesFile=STRING;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//UsedDescriptions:
	//	"use: " description=DescriptionType (" as: " localName=STRING)?;
	public UsedDescriptionsElements getUsedDescriptionsAccess() {
		return pUsedDescriptions;
	}
	
	public ParserRule getUsedDescriptionsRule() {
		return getUsedDescriptionsAccess().getRule();
	}

	//DescriptionType:
	//	UIDescriptionImport | ComplexComponent;
	public DescriptionTypeElements getDescriptionTypeAccess() {
		return pDescriptionType;
	}
	
	public ParserRule getDescriptionTypeRule() {
		return getDescriptionTypeAccess().getRule();
	}

	//AreaCount:
	//	"Area count: " areaCount=INT;
	public AreaCountElements getAreaCountAccess() {
		return pAreaCount;
	}
	
	public ParserRule getAreaCountRule() {
		return getAreaCountAccess().getRule();
	}

	//Definition:
	//	"DEF " concreteDefition=ComponentDefinition "END DEF";
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//TypeDefinition:
	//	"type: " type=Type;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//Type:
	//	"WINDOW" | "INNERCOMPLEX";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//UIDescriptionImport:
	//	descriptionName=STRING;
	public UIDescriptionImportElements getUIDescriptionImportAccess() {
		return pUIDescriptionImport;
	}
	
	public ParserRule getUIDescriptionImportRule() {
		return getUIDescriptionImportAccess().getRule();
	}

	//ComplexComponent:
	//	Multiselection;
	public ComplexComponentElements getComplexComponentAccess() {
		return pComplexComponent;
	}
	
	public ParserRule getComplexComponentRule() {
		return getComplexComponentAccess().getRule();
	}

	//Multiselection:
	//	descriptionName="Multiselection" ("<" inputType=STRING ">")?;
	public MultiselectionElements getMultiselectionAccess() {
		return pMultiselection;
	}
	
	public ParserRule getMultiselectionRule() {
		return getMultiselectionAccess().getRule();
	}

	//AreaAssignment:
	//	"Area:" area=INT "<-" elements+=STRING+ | elements+=STRING+ "->" "Area:" area=INT;
	public AreaAssignmentElements getAreaAssignmentAccess() {
		return pAreaAssignment;
	}
	
	public ParserRule getAreaAssignmentRule() {
		return getAreaAssignmentAccess().getRule();
	}

	//ComponentDefinition:
	//	LabelDefinition | ButtonDefinition;
	public ComponentDefinitionElements getComponentDefinitionAccess() {
		return pComponentDefinition;
	}
	
	public ParserRule getComponentDefinitionRule() {
		return getComponentDefinitionAccess().getRule();
	}

	//ButtonDefinition:
	//	type="Button" " as " name=STRING properties=Properties?;
	public ButtonDefinitionElements getButtonDefinitionAccess() {
		return pButtonDefinition;
	}
	
	public ParserRule getButtonDefinitionRule() {
		return getButtonDefinitionAccess().getRule();
	}

	//Properties:
	//	":" ("propertyKey=" propertyKey=STRING)? ("text=" text=STRING)? ("interactiontype="
	//	interactiontype+=Interactiontype+)?;
	public PropertiesElements getPropertiesAccess() {
		return pProperties;
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}

	//LabelDefinition:
	//	type="Label" " as " name=STRING properties=Properties?;
	public LabelDefinitionElements getLabelDefinitionAccess() {
		return pLabelDefinition;
	}
	
	public ParserRule getLabelDefinitionRule() {
		return getLabelDefinitionAccess().getRule();
	}

	//Interactiontype:
	//	"Click" | "ChangeText";
	public InteractiontypeElements getInteractiontypeAccess() {
		return pInteractiontype;
	}
	
	public ParserRule getInteractiontypeRule() {
		return getInteractiontypeAccess().getRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n" | ",")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
