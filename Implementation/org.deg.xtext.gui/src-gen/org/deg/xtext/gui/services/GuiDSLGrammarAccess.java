/*
* generated by Xtext
*/
package org.deg.xtext.gui.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GuiDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UIDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_0_0 = (RuleCall)cTypeDefinitionAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Assignment cLayoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLayoutLayoutParserRuleCall_2_0 = (RuleCall)cLayoutAssignment_2.eContents().get(0);
		private final Assignment cUsedDescriptionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUsedDescriptionsUsedDescriptionsParserRuleCall_3_0 = (RuleCall)cUsedDescriptionsAssignment_3.eContents().get(0);
		private final Assignment cRefinementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRefinementsRefinementParserRuleCall_4_0 = (RuleCall)cRefinementsAssignment_4.eContents().get(0);
		private final Assignment cDefinitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_5_0 = (RuleCall)cDefinitionsAssignment_5.eContents().get(0);
		private final Assignment cStructureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStructureStructureParserRuleCall_6_0 = (RuleCall)cStructureAssignment_6.eContents().get(0);
		
		//UIDescription:
		//	typeDefinition=TypeDefinition property=Property? layout=Layout? usedDescriptions+=UsedDescriptions*
		//	refinements+=Refinement* definitions+=Definition* structure=Structure;
		public ParserRule getRule() { return rule; }

		//typeDefinition=TypeDefinition property=Property? layout=Layout? usedDescriptions+=UsedDescriptions*
		//refinements+=Refinement* definitions+=Definition* structure=Structure
		public Group getGroup() { return cGroup; }

		//typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_0() { return cTypeDefinitionAssignment_0; }

		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_0_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_0_0; }

		//property=Property?
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_0() { return cPropertyPropertyParserRuleCall_1_0; }

		//layout=Layout?
		public Assignment getLayoutAssignment_2() { return cLayoutAssignment_2; }

		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_2_0() { return cLayoutLayoutParserRuleCall_2_0; }

		//usedDescriptions+=UsedDescriptions*
		public Assignment getUsedDescriptionsAssignment_3() { return cUsedDescriptionsAssignment_3; }

		//UsedDescriptions
		public RuleCall getUsedDescriptionsUsedDescriptionsParserRuleCall_3_0() { return cUsedDescriptionsUsedDescriptionsParserRuleCall_3_0; }

		//refinements+=Refinement*
		public Assignment getRefinementsAssignment_4() { return cRefinementsAssignment_4; }

		//Refinement
		public RuleCall getRefinementsRefinementParserRuleCall_4_0() { return cRefinementsRefinementParserRuleCall_4_0; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_5() { return cDefinitionsAssignment_5; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_5_0() { return cDefinitionsDefinitionParserRuleCall_5_0; }

		//structure=Structure
		public Assignment getStructureAssignment_6() { return cStructureAssignment_6; }

		//Structure
		public RuleCall getStructureStructureParserRuleCall_6_0() { return cStructureStructureParserRuleCall_6_0; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeDefinition:
		//	"type: " type=Type ";";
		public ParserRule getRule() { return rule; }

		//"type: " type=Type ";"
		public Group getGroup() { return cGroup; }

		//"type: "
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cIdAlternatives_0 = (Alternatives)cIdAssignment.eContents().get(0);
		private final Keyword cIdWINDOWKeyword_0_0 = (Keyword)cIdAlternatives_0.eContents().get(0);
		private final Keyword cIdINNERCOMPLEXKeyword_0_1 = (Keyword)cIdAlternatives_0.eContents().get(1);
		
		//Type:
		//	id=("WINDOW" | "INNERCOMPLEX");
		public ParserRule getRule() { return rule; }

		//id=("WINDOW" | "INNERCOMPLEX")
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"WINDOW" | "INNERCOMPLEX"
		public Alternatives getIdAlternatives_0() { return cIdAlternatives_0; }

		//"WINDOW"
		public Keyword getIdWINDOWKeyword_0_0() { return cIdWINDOWKeyword_0_0; }

		//"INNERCOMPLEX"
		public Keyword getIdINNERCOMPLEXKeyword_0_1() { return cIdINNERCOMPLEXKeyword_0_1; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetPropertiesFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesFilesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesFilesSTRINGTerminalRuleCall_1_0 = (RuleCall)cPropertiesFilesAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Property:
		//	"get properties from:" propertiesFiles+=STRING+ ";";
		public ParserRule getRule() { return rule; }

		//"get properties from:" propertiesFiles+=STRING+ ";"
		public Group getGroup() { return cGroup; }

		//"get properties from:"
		public Keyword getGetPropertiesFromKeyword_0() { return cGetPropertiesFromKeyword_0; }

		//propertiesFiles+=STRING+
		public Assignment getPropertiesFilesAssignment_1() { return cPropertiesFilesAssignment_1; }

		//STRING
		public RuleCall getPropertiesFilesSTRINGTerminalRuleCall_1_0() { return cPropertiesFilesSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetLayoutFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLayoutFilesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLayoutFilesSTRINGTerminalRuleCall_1_0 = (RuleCall)cLayoutFilesAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Layout:
		//	"get layout from:" layoutFiles+=STRING+ ";";
		public ParserRule getRule() { return rule; }

		//"get layout from:" layoutFiles+=STRING+ ";"
		public Group getGroup() { return cGroup; }

		//"get layout from:"
		public Keyword getGetLayoutFromKeyword_0() { return cGetLayoutFromKeyword_0; }

		//layoutFiles+=STRING+
		public Assignment getLayoutFilesAssignment_1() { return cLayoutFilesAssignment_1; }

		//STRING
		public RuleCall getLayoutFilesSTRINGTerminalRuleCall_1_0() { return cLayoutFilesSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class UsedDescriptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsedDescriptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionDescriptionTypeParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UsedDescriptions:
		//	"use:" description=DescriptionType ("as:" id=STRING)? ";";
		public ParserRule getRule() { return rule; }

		//"use:" description=DescriptionType ("as:" id=STRING)? ";"
		public Group getGroup() { return cGroup; }

		//"use:"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//description=DescriptionType
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//DescriptionType
		public RuleCall getDescriptionDescriptionTypeParserRuleCall_1_0() { return cDescriptionDescriptionTypeParserRuleCall_1_0; }

		//("as:" id=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"as:"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//id=STRING
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_1_0() { return cIdSTRINGTerminalRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DescriptionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescriptionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUIDescriptionImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DescriptionType:
		//	UIDescriptionImport | ComplexComponent;
		public ParserRule getRule() { return rule; }

		//UIDescriptionImport | ComplexComponent
		public Alternatives getAlternatives() { return cAlternatives; }

		//UIDescriptionImport
		public RuleCall getUIDescriptionImportParserRuleCall_0() { return cUIDescriptionImportParserRuleCall_0; }

		//ComplexComponent
		public RuleCall getComplexComponentParserRuleCall_1() { return cComplexComponentParserRuleCall_1; }
	}

	public class ComplexComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexComponent");
		private final RuleCall cMultiselectionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ComplexComponent:
		//	Multiselection;
		public ParserRule getRule() { return rule; }

		//Multiselection
		public RuleCall getMultiselectionParserRuleCall() { return cMultiselectionParserRuleCall; }
	}

	public class UIDescriptionImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIDescriptionImport");
		private final Assignment cDescriptionNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDescriptionNameSTRINGTerminalRuleCall_0 = (RuleCall)cDescriptionNameAssignment.eContents().get(0);
		
		//UIDescriptionImport:
		//	descriptionName=STRING;
		public ParserRule getRule() { return rule; }

		//descriptionName=STRING
		public Assignment getDescriptionNameAssignment() { return cDescriptionNameAssignment; }

		//STRING
		public RuleCall getDescriptionNameSTRINGTerminalRuleCall_0() { return cDescriptionNameSTRINGTerminalRuleCall_0; }
	}

	public class RefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Refinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConcreteRefinementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConcreteRefinementComponentRefinementParserRuleCall_0_0 = (RuleCall)cConcreteRefinementAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Refinement:
		//	concreteRefinement=ComponentRefinement ";";
		public ParserRule getRule() { return rule; }

		//concreteRefinement=ComponentRefinement ";"
		public Group getGroup() { return cGroup; }

		//concreteRefinement=ComponentRefinement
		public Assignment getConcreteRefinementAssignment_0() { return cConcreteRefinementAssignment_0; }

		//ComponentRefinement
		public RuleCall getConcreteRefinementComponentRefinementParserRuleCall_0_0() { return cConcreteRefinementComponentRefinementParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ComponentRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentRefinement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelRefinementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonRefinementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextfieldRefinementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextareaRefinementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTableRefinementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTabViewRefinementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTreeRefinementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInterchangeableRefinementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//ComponentRefinement:
		//	LabelRefinement | ButtonRefinement | TextfieldRefinement | TextareaRefinement | TableRefinement | TabViewRefinement |
		//	TreeRefinement | InterchangeableRefinement;
		public ParserRule getRule() { return rule; }

		//LabelRefinement | ButtonRefinement | TextfieldRefinement | TextareaRefinement | TableRefinement | TabViewRefinement |
		//TreeRefinement | InterchangeableRefinement
		public Alternatives getAlternatives() { return cAlternatives; }

		//LabelRefinement
		public RuleCall getLabelRefinementParserRuleCall_0() { return cLabelRefinementParserRuleCall_0; }

		//ButtonRefinement
		public RuleCall getButtonRefinementParserRuleCall_1() { return cButtonRefinementParserRuleCall_1; }

		//TextfieldRefinement
		public RuleCall getTextfieldRefinementParserRuleCall_2() { return cTextfieldRefinementParserRuleCall_2; }

		//TextareaRefinement
		public RuleCall getTextareaRefinementParserRuleCall_3() { return cTextareaRefinementParserRuleCall_3; }

		//TableRefinement
		public RuleCall getTableRefinementParserRuleCall_4() { return cTableRefinementParserRuleCall_4; }

		//TabViewRefinement
		public RuleCall getTabViewRefinementParserRuleCall_5() { return cTabViewRefinementParserRuleCall_5; }

		//TreeRefinement
		public RuleCall getTreeRefinementParserRuleCall_6() { return cTreeRefinementParserRuleCall_6; }

		//InterchangeableRefinement
		public RuleCall getInterchangeableRefinementParserRuleCall_7() { return cInterchangeableRefinementParserRuleCall_7; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConcreteDefitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConcreteDefitionComponentDefinitionParserRuleCall_0_0 = (RuleCall)cConcreteDefitionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Definition:
		//	concreteDefition=ComponentDefinition ";";
		public ParserRule getRule() { return rule; }

		//concreteDefition=ComponentDefinition ";"
		public Group getGroup() { return cGroup; }

		//concreteDefition=ComponentDefinition
		public Assignment getConcreteDefitionAssignment_0() { return cConcreteDefitionAssignment_0; }

		//ComponentDefinition
		public RuleCall getConcreteDefitionComponentDefinitionParserRuleCall_0_0() { return cConcreteDefitionComponentDefinitionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextfieldDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextareaDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTreeDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTableDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTabViewDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInterchangeableDefinitionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//ComponentDefinition:
		//	LabelDefinition | ButtonDefinition | TextfieldDefinition | TextareaDefinition | TreeDefinition | TableDefinition |
		//	TabViewDefinition | InterchangeableDefinition;
		public ParserRule getRule() { return rule; }

		//LabelDefinition | ButtonDefinition | TextfieldDefinition | TextareaDefinition | TreeDefinition | TableDefinition |
		//TabViewDefinition | InterchangeableDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//LabelDefinition
		public RuleCall getLabelDefinitionParserRuleCall_0() { return cLabelDefinitionParserRuleCall_0; }

		//ButtonDefinition
		public RuleCall getButtonDefinitionParserRuleCall_1() { return cButtonDefinitionParserRuleCall_1; }

		//TextfieldDefinition
		public RuleCall getTextfieldDefinitionParserRuleCall_2() { return cTextfieldDefinitionParserRuleCall_2; }

		//TextareaDefinition
		public RuleCall getTextareaDefinitionParserRuleCall_3() { return cTextareaDefinitionParserRuleCall_3; }

		//TreeDefinition
		public RuleCall getTreeDefinitionParserRuleCall_4() { return cTreeDefinitionParserRuleCall_4; }

		//TableDefinition
		public RuleCall getTableDefinitionParserRuleCall_5() { return cTableDefinitionParserRuleCall_5; }

		//TabViewDefinition
		public RuleCall getTabViewDefinitionParserRuleCall_6() { return cTabViewDefinitionParserRuleCall_6; }

		//InterchangeableDefinition
		public RuleCall getInterchangeableDefinitionParserRuleCall_7() { return cInterchangeableDefinitionParserRuleCall_7; }
	}

	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameStructureKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderedElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderedElementsElementParserRuleCall_2_0 = (RuleCall)cOrderedElementsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Structure:
		//	name="Structure" ":" orderedElements+=Element* ";";
		public ParserRule getRule() { return rule; }

		//name="Structure" ":" orderedElements+=Element* ";"
		public Group getGroup() { return cGroup; }

		//name="Structure"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Structure"
		public Keyword getNameStructureKeyword_0_0() { return cNameStructureKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//orderedElements+=Element*
		public Assignment getOrderedElementsAssignment_2() { return cOrderedElementsAssignment_2; }

		//Element
		public RuleCall getOrderedElementsElementParserRuleCall_2_0() { return cOrderedElementsElementParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdSTRINGTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Element:
		//	id=STRING;
		public ParserRule getRule() { return rule; }

		//id=STRING
		public Assignment getIdAssignment() { return cIdAssignment; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_0() { return cIdSTRINGTerminalRuleCall_0; }
	}

	public class TableRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTableKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cInputTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0 = (RuleCall)cInputTypeAssignment_1.eContents().get(0);
		private final Keyword cChangeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdSTRINGTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesCommonPropertiesParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		
		//TableRefinement:
		//	name="Table" inputType=INPUT_DESCRIPTION? "change:" id=STRING properties=CommonProperties?;
		public ParserRule getRule() { return rule; }

		//name="Table" inputType=INPUT_DESCRIPTION? "change:" id=STRING properties=CommonProperties?
		public Group getGroup() { return cGroup; }

		//name="Table"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Table"
		public Keyword getNameTableKeyword_0_0() { return cNameTableKeyword_0_0; }

		//inputType=INPUT_DESCRIPTION?
		public Assignment getInputTypeAssignment_1() { return cInputTypeAssignment_1; }

		//INPUT_DESCRIPTION
		public RuleCall getInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0() { return cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0; }

		//"change:"
		public Keyword getChangeKeyword_2() { return cChangeKeyword_2; }

		//id=STRING
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_3_0() { return cIdSTRINGTerminalRuleCall_3_0; }

		//properties=CommonProperties?
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//CommonProperties
		public RuleCall getPropertiesCommonPropertiesParserRuleCall_4_0() { return cPropertiesCommonPropertiesParserRuleCall_4_0; }
	}

	public class TabViewRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TabViewRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTabViewKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cTabsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTabsTabDefinitionParserRuleCall_1_0 = (RuleCall)cTabsAssignment_1.eContents().get(0);
		private final Keyword cChangeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdSTRINGTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesCommonPropertiesParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		
		//TabViewRefinement:
		//	name="TabView" tabs+=TabDefinition? "change:" id=STRING properties=CommonProperties?;
		public ParserRule getRule() { return rule; }

		//name="TabView" tabs+=TabDefinition? "change:" id=STRING properties=CommonProperties?
		public Group getGroup() { return cGroup; }

		//name="TabView"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"TabView"
		public Keyword getNameTabViewKeyword_0_0() { return cNameTabViewKeyword_0_0; }

		//tabs+=TabDefinition?
		public Assignment getTabsAssignment_1() { return cTabsAssignment_1; }

		//TabDefinition
		public RuleCall getTabsTabDefinitionParserRuleCall_1_0() { return cTabsTabDefinitionParserRuleCall_1_0; }

		//"change:"
		public Keyword getChangeKeyword_2() { return cChangeKeyword_2; }

		//id=STRING
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_3_0() { return cIdSTRINGTerminalRuleCall_3_0; }

		//properties=CommonProperties?
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//CommonProperties
		public RuleCall getPropertiesCommonPropertiesParserRuleCall_4_0() { return cPropertiesCommonPropertiesParserRuleCall_4_0; }
	}

	public class TreeRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TreeRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTreeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cInputTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0 = (RuleCall)cInputTypeAssignment_1.eContents().get(0);
		private final Keyword cChangeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdSTRINGTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesCommonPropertiesParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		
		//TreeRefinement:
		//	name="Tree" inputType=INPUT_DESCRIPTION? "change:" id=STRING properties=CommonProperties?;
		public ParserRule getRule() { return rule; }

		//name="Tree" inputType=INPUT_DESCRIPTION? "change:" id=STRING properties=CommonProperties?
		public Group getGroup() { return cGroup; }

		//name="Tree"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Tree"
		public Keyword getNameTreeKeyword_0_0() { return cNameTreeKeyword_0_0; }

		//inputType=INPUT_DESCRIPTION?
		public Assignment getInputTypeAssignment_1() { return cInputTypeAssignment_1; }

		//INPUT_DESCRIPTION
		public RuleCall getInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0() { return cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0; }

		//"change:"
		public Keyword getChangeKeyword_2() { return cChangeKeyword_2; }

		//id=STRING
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_3_0() { return cIdSTRINGTerminalRuleCall_3_0; }

		//properties=CommonProperties?
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//CommonProperties
		public RuleCall getPropertiesCommonPropertiesParserRuleCall_4_0() { return cPropertiesCommonPropertiesParserRuleCall_4_0; }
	}

	public class InterchangeableRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterchangeableRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInterchangeableKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cChangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesCommonPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//InterchangeableRefinement:
		//	name="Interchangeable" "change:" id=STRING properties=CommonProperties?;
		public ParserRule getRule() { return rule; }

		//name="Interchangeable" "change:" id=STRING properties=CommonProperties?
		public Group getGroup() { return cGroup; }

		//name="Interchangeable"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Interchangeable"
		public Keyword getNameInterchangeableKeyword_0_0() { return cNameInterchangeableKeyword_0_0; }

		//"change:"
		public Keyword getChangeKeyword_1() { return cChangeKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=CommonProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//CommonProperties
		public RuleCall getPropertiesCommonPropertiesParserRuleCall_3_0() { return cPropertiesCommonPropertiesParserRuleCall_3_0; }
	}

	public class TextareaRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextareaRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTextareaKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cChangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesTextareaPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//TextareaRefinement:
		//	name="Textarea" "change:" id=STRING properties=TextareaProperties?;
		public ParserRule getRule() { return rule; }

		//name="Textarea" "change:" id=STRING properties=TextareaProperties?
		public Group getGroup() { return cGroup; }

		//name="Textarea"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Textarea"
		public Keyword getNameTextareaKeyword_0_0() { return cNameTextareaKeyword_0_0; }

		//"change:"
		public Keyword getChangeKeyword_1() { return cChangeKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=TextareaProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//TextareaProperties
		public RuleCall getPropertiesTextareaPropertiesParserRuleCall_3_0() { return cPropertiesTextareaPropertiesParserRuleCall_3_0; }
	}

	public class TextfieldRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextfieldRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTextfieldKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cChangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesTextfieldPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//TextfieldRefinement:
		//	name="Textfield" "change:" id=STRING properties=TextfieldProperties?;
		public ParserRule getRule() { return rule; }

		//name="Textfield" "change:" id=STRING properties=TextfieldProperties?
		public Group getGroup() { return cGroup; }

		//name="Textfield"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Textfield"
		public Keyword getNameTextfieldKeyword_0_0() { return cNameTextfieldKeyword_0_0; }

		//"change:"
		public Keyword getChangeKeyword_1() { return cChangeKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=TextfieldProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//TextfieldProperties
		public RuleCall getPropertiesTextfieldPropertiesParserRuleCall_3_0() { return cPropertiesTextfieldPropertiesParserRuleCall_3_0; }
	}

	public class ButtonRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameButtonKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cChangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesButtonPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//ButtonRefinement:
		//	name="Button" "change:" id=STRING properties=ButtonProperties?;
		public ParserRule getRule() { return rule; }

		//name="Button" "change:" id=STRING properties=ButtonProperties?
		public Group getGroup() { return cGroup; }

		//name="Button"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Button"
		public Keyword getNameButtonKeyword_0_0() { return cNameButtonKeyword_0_0; }

		//"change:"
		public Keyword getChangeKeyword_1() { return cChangeKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=ButtonProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//ButtonProperties
		public RuleCall getPropertiesButtonPropertiesParserRuleCall_3_0() { return cPropertiesButtonPropertiesParserRuleCall_3_0; }
	}

	public class LabelRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLabelKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cChangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//LabelRefinement:
		//	name="Label" "change:" id=STRING properties=LabelProperties?;
		public ParserRule getRule() { return rule; }

		//name="Label" "change:" id=STRING properties=LabelProperties?
		public Group getGroup() { return cGroup; }

		//name="Label"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Label"
		public Keyword getNameLabelKeyword_0_0() { return cNameLabelKeyword_0_0; }

		//"change:"
		public Keyword getChangeKeyword_1() { return cChangeKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=LabelProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_3_0() { return cPropertiesLabelPropertiesParserRuleCall_3_0; }
	}

	public class TabViewDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TabViewDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTabViewKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cTabsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTabsTabDefinitionParserRuleCall_1_0 = (RuleCall)cTabsAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdSTRINGTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesCommonPropertiesParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		
		//TabViewDefinition:
		//	name="TabView" tabs+=TabDefinition* "as:" id=STRING properties=CommonProperties?;
		public ParserRule getRule() { return rule; }

		//name="TabView" tabs+=TabDefinition* "as:" id=STRING properties=CommonProperties?
		public Group getGroup() { return cGroup; }

		//name="TabView"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"TabView"
		public Keyword getNameTabViewKeyword_0_0() { return cNameTabViewKeyword_0_0; }

		//tabs+=TabDefinition*
		public Assignment getTabsAssignment_1() { return cTabsAssignment_1; }

		//TabDefinition
		public RuleCall getTabsTabDefinitionParserRuleCall_1_0() { return cTabsTabDefinitionParserRuleCall_1_0; }

		//"as:"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//id=STRING
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_3_0() { return cIdSTRINGTerminalRuleCall_3_0; }

		//properties=CommonProperties?
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//CommonProperties
		public RuleCall getPropertiesCommonPropertiesParserRuleCall_4_0() { return cPropertiesCommonPropertiesParserRuleCall_4_0; }
	}

	public class TabDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TabDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTABNAMETerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TabDefinition:
		//	name=TABNAME;
		public ParserRule getRule() { return rule; }

		//name=TABNAME
		public Assignment getNameAssignment() { return cNameAssignment; }

		//TABNAME
		public RuleCall getNameTABNAMETerminalRuleCall_0() { return cNameTABNAMETerminalRuleCall_0; }
	}

	public class MultiselectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiselection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMultiselectionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cInputTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0 = (RuleCall)cInputTypeAssignment_1.eContents().get(0);
		
		//Multiselection:
		//	name="Multiselection" inputType=INPUT_DESCRIPTION?;
		public ParserRule getRule() { return rule; }

		//name="Multiselection" inputType=INPUT_DESCRIPTION?
		public Group getGroup() { return cGroup; }

		//name="Multiselection"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Multiselection"
		public Keyword getNameMultiselectionKeyword_0_0() { return cNameMultiselectionKeyword_0_0; }

		//inputType=INPUT_DESCRIPTION?
		public Assignment getInputTypeAssignment_1() { return cInputTypeAssignment_1; }

		//INPUT_DESCRIPTION
		public RuleCall getInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0() { return cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0; }
	}

	public class TextfieldDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextfieldDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTextfieldKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesTextfieldPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//TextfieldDefinition:
		//	name="Textfield" "as:" id=STRING properties=TextfieldProperties?;
		public ParserRule getRule() { return rule; }

		//name="Textfield" "as:" id=STRING properties=TextfieldProperties?
		public Group getGroup() { return cGroup; }

		//name="Textfield"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Textfield"
		public Keyword getNameTextfieldKeyword_0_0() { return cNameTextfieldKeyword_0_0; }

		//"as:"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=TextfieldProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//TextfieldProperties
		public RuleCall getPropertiesTextfieldPropertiesParserRuleCall_3_0() { return cPropertiesTextfieldPropertiesParserRuleCall_3_0; }
	}

	public class TextareaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextareaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTextareaKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesTextareaPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//TextareaDefinition:
		//	name="Textarea" "as:" id=STRING properties=TextareaProperties?;
		public ParserRule getRule() { return rule; }

		//name="Textarea" "as:" id=STRING properties=TextareaProperties?
		public Group getGroup() { return cGroup; }

		//name="Textarea"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Textarea"
		public Keyword getNameTextareaKeyword_0_0() { return cNameTextareaKeyword_0_0; }

		//"as:"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=TextareaProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//TextareaProperties
		public RuleCall getPropertiesTextareaPropertiesParserRuleCall_3_0() { return cPropertiesTextareaPropertiesParserRuleCall_3_0; }
	}

	public class TreeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TreeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTreeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cInputTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0 = (RuleCall)cInputTypeAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdSTRINGTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesCommonPropertiesParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		
		//TreeDefinition:
		//	name="Tree" inputType=INPUT_DESCRIPTION "as:" id=STRING properties=CommonProperties?;
		public ParserRule getRule() { return rule; }

		//name="Tree" inputType=INPUT_DESCRIPTION "as:" id=STRING properties=CommonProperties?
		public Group getGroup() { return cGroup; }

		//name="Tree"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Tree"
		public Keyword getNameTreeKeyword_0_0() { return cNameTreeKeyword_0_0; }

		//inputType=INPUT_DESCRIPTION
		public Assignment getInputTypeAssignment_1() { return cInputTypeAssignment_1; }

		//INPUT_DESCRIPTION
		public RuleCall getInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0() { return cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0; }

		//"as:"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//id=STRING
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_3_0() { return cIdSTRINGTerminalRuleCall_3_0; }

		//properties=CommonProperties?
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//CommonProperties
		public RuleCall getPropertiesCommonPropertiesParserRuleCall_4_0() { return cPropertiesCommonPropertiesParserRuleCall_4_0; }
	}

	public class TableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTableKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cInputTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0 = (RuleCall)cInputTypeAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdSTRINGTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesCommonPropertiesParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		
		//TableDefinition:
		//	name="Table" inputType=INPUT_DESCRIPTION "as:" id=STRING properties=CommonProperties?;
		public ParserRule getRule() { return rule; }

		//name="Table" inputType=INPUT_DESCRIPTION "as:" id=STRING properties=CommonProperties?
		public Group getGroup() { return cGroup; }

		//name="Table"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Table"
		public Keyword getNameTableKeyword_0_0() { return cNameTableKeyword_0_0; }

		//inputType=INPUT_DESCRIPTION
		public Assignment getInputTypeAssignment_1() { return cInputTypeAssignment_1; }

		//INPUT_DESCRIPTION
		public RuleCall getInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0() { return cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0; }

		//"as:"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//id=STRING
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_3_0() { return cIdSTRINGTerminalRuleCall_3_0; }

		//properties=CommonProperties?
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//CommonProperties
		public RuleCall getPropertiesCommonPropertiesParserRuleCall_4_0() { return cPropertiesCommonPropertiesParserRuleCall_4_0; }
	}

	public class InterchangeableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterchangeableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInterchangeableAreaKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesCommonPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//InterchangeableDefinition:
		//	name="Interchangeable Area" "as:" id=STRING properties=CommonProperties?;
		public ParserRule getRule() { return rule; }

		//name="Interchangeable Area" "as:" id=STRING properties=CommonProperties?
		public Group getGroup() { return cGroup; }

		//name="Interchangeable Area"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Interchangeable Area"
		public Keyword getNameInterchangeableAreaKeyword_0_0() { return cNameInterchangeableAreaKeyword_0_0; }

		//"as:"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=CommonProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//CommonProperties
		public RuleCall getPropertiesCommonPropertiesParserRuleCall_3_0() { return cPropertiesCommonPropertiesParserRuleCall_3_0; }
	}

	public class ButtonDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameButtonKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesButtonPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//ButtonDefinition:
		//	name="Button" "as:" id=STRING properties=ButtonProperties?;
		public ParserRule getRule() { return rule; }

		//name="Button" "as:" id=STRING properties=ButtonProperties?
		public Group getGroup() { return cGroup; }

		//name="Button"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Button"
		public Keyword getNameButtonKeyword_0_0() { return cNameButtonKeyword_0_0; }

		//"as:"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=ButtonProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//ButtonProperties
		public RuleCall getPropertiesButtonPropertiesParserRuleCall_3_0() { return cPropertiesButtonPropertiesParserRuleCall_3_0; }
	}

	public class LabelDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLabelKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//LabelDefinition:
		//	name="Label" "as:" id=STRING properties=LabelProperties?;
		public ParserRule getRule() { return rule; }

		//name="Label" "as:" id=STRING properties=LabelProperties?
		public Group getGroup() { return cGroup; }

		//name="Label"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Label"
		public Keyword getNameLabelKeyword_0_0() { return cNameLabelKeyword_0_0; }

		//"as:"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=LabelProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_3_0() { return cPropertiesLabelPropertiesParserRuleCall_3_0; }
	}

	public class InteractiontypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interactiontype");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cIdAlternatives_0 = (Alternatives)cIdAssignment.eContents().get(0);
		private final Keyword cIdIfActivatorKeyword_0_0 = (Keyword)cIdAlternatives_0.eContents().get(0);
		private final Keyword cIdIfTextDisplayKeyword_0_1 = (Keyword)cIdAlternatives_0.eContents().get(1);
		private final Keyword cIdIfViewImageKeyword_0_2 = (Keyword)cIdAlternatives_0.eContents().get(2);
		
		//Interactiontype:
		//	id=("IfActivator" | "IfTextDisplay" | "IfViewImage");
		public ParserRule getRule() { return rule; }

		//id=("IfActivator" | "IfTextDisplay" | "IfViewImage")
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"IfActivator" | "IfTextDisplay" | "IfViewImage"
		public Alternatives getIdAlternatives_0() { return cIdAlternatives_0; }

		//"IfActivator"
		public Keyword getIdIfActivatorKeyword_0_0() { return cIdIfActivatorKeyword_0_0; }

		//"IfTextDisplay"
		public Keyword getIdIfTextDisplayKeyword_0_1() { return cIdIfTextDisplayKeyword_0_1; }

		//"IfViewImage"
		public Keyword getIdIfViewImageKeyword_0_2() { return cIdIfViewImageKeyword_0_2; }
	}

	public class TextareaPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextareaProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommonPropertiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommonPropertiesCommonPropertiesParserRuleCall_0_0 = (RuleCall)cCommonPropertiesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTextKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTextAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEditableKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEditableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEditableBOOLEANTerminalRuleCall_2_1_0 = (RuleCall)cEditableAssignment_2_1.eContents().get(0);
		
		//TextareaProperties:
		//	commonProperties=CommonProperties ("text=" text=STRING)? ("editable=" editable=BOOLEAN)?;
		public ParserRule getRule() { return rule; }

		//commonProperties=CommonProperties ("text=" text=STRING)? ("editable=" editable=BOOLEAN)?
		public Group getGroup() { return cGroup; }

		//commonProperties=CommonProperties
		public Assignment getCommonPropertiesAssignment_0() { return cCommonPropertiesAssignment_0; }

		//CommonProperties
		public RuleCall getCommonPropertiesCommonPropertiesParserRuleCall_0_0() { return cCommonPropertiesCommonPropertiesParserRuleCall_0_0; }

		//("text=" text=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"text="
		public Keyword getTextKeyword_1_0() { return cTextKeyword_1_0; }

		//text=STRING
		public Assignment getTextAssignment_1_1() { return cTextAssignment_1_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_1_0() { return cTextSTRINGTerminalRuleCall_1_1_0; }

		//("editable=" editable=BOOLEAN)?
		public Group getGroup_2() { return cGroup_2; }

		//"editable="
		public Keyword getEditableKeyword_2_0() { return cEditableKeyword_2_0; }

		//editable=BOOLEAN
		public Assignment getEditableAssignment_2_1() { return cEditableAssignment_2_1; }

		//BOOLEAN
		public RuleCall getEditableBOOLEANTerminalRuleCall_2_1_0() { return cEditableBOOLEANTerminalRuleCall_2_1_0; }
	}

	public class TextfieldPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextfieldProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommonPropertiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommonPropertiesCommonPropertiesParserRuleCall_0_0 = (RuleCall)cCommonPropertiesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTextKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTextAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEditableKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEditableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEditableBOOLEANTerminalRuleCall_2_1_0 = (RuleCall)cEditableAssignment_2_1.eContents().get(0);
		
		//TextfieldProperties:
		//	commonProperties=CommonProperties ("text=" text=STRING)? ("editable=" editable=BOOLEAN)?;
		public ParserRule getRule() { return rule; }

		//commonProperties=CommonProperties ("text=" text=STRING)? ("editable=" editable=BOOLEAN)?
		public Group getGroup() { return cGroup; }

		//commonProperties=CommonProperties
		public Assignment getCommonPropertiesAssignment_0() { return cCommonPropertiesAssignment_0; }

		//CommonProperties
		public RuleCall getCommonPropertiesCommonPropertiesParserRuleCall_0_0() { return cCommonPropertiesCommonPropertiesParserRuleCall_0_0; }

		//("text=" text=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"text="
		public Keyword getTextKeyword_1_0() { return cTextKeyword_1_0; }

		//text=STRING
		public Assignment getTextAssignment_1_1() { return cTextAssignment_1_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_1_0() { return cTextSTRINGTerminalRuleCall_1_1_0; }

		//("editable=" editable=BOOLEAN)?
		public Group getGroup_2() { return cGroup_2; }

		//"editable="
		public Keyword getEditableKeyword_2_0() { return cEditableKeyword_2_0; }

		//editable=BOOLEAN
		public Assignment getEditableAssignment_2_1() { return cEditableAssignment_2_1; }

		//BOOLEAN
		public RuleCall getEditableBOOLEANTerminalRuleCall_2_1_0() { return cEditableBOOLEANTerminalRuleCall_2_1_0; }
	}

	public class LabelPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommonPropertiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommonPropertiesCommonPropertiesParserRuleCall_0_0 = (RuleCall)cCommonPropertiesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTextKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTextAssignment_1_1.eContents().get(0);
		
		//LabelProperties:
		//	commonProperties=CommonProperties ("text=" text=STRING)?;
		public ParserRule getRule() { return rule; }

		//commonProperties=CommonProperties ("text=" text=STRING)?
		public Group getGroup() { return cGroup; }

		//commonProperties=CommonProperties
		public Assignment getCommonPropertiesAssignment_0() { return cCommonPropertiesAssignment_0; }

		//CommonProperties
		public RuleCall getCommonPropertiesCommonPropertiesParserRuleCall_0_0() { return cCommonPropertiesCommonPropertiesParserRuleCall_0_0; }

		//("text=" text=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"text="
		public Keyword getTextKeyword_1_0() { return cTextKeyword_1_0; }

		//text=STRING
		public Assignment getTextAssignment_1_1() { return cTextAssignment_1_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_1_0() { return cTextSTRINGTerminalRuleCall_1_1_0; }
	}

	public class ButtonPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommonPropertiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommonPropertiesCommonPropertiesParserRuleCall_0_0 = (RuleCall)cCommonPropertiesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTextKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTextAssignment_1_1.eContents().get(0);
		
		//ButtonProperties:
		//	commonProperties=CommonProperties ("text=" text=STRING)?;
		public ParserRule getRule() { return rule; }

		//commonProperties=CommonProperties ("text=" text=STRING)?
		public Group getGroup() { return cGroup; }

		//commonProperties=CommonProperties
		public Assignment getCommonPropertiesAssignment_0() { return cCommonPropertiesAssignment_0; }

		//CommonProperties
		public RuleCall getCommonPropertiesCommonPropertiesParserRuleCall_0_0() { return cCommonPropertiesCommonPropertiesParserRuleCall_0_0; }

		//("text=" text=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"text="
		public Keyword getTextKeyword_1_0() { return cTextKeyword_1_0; }

		//text=STRING
		public Assignment getTextAssignment_1_1() { return cTextAssignment_1_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_1_0() { return cTextSTRINGTerminalRuleCall_1_1_0; }
	}

	public class CommonPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommonProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPropertyKeyKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPropertyKeyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPropertyKeySTRINGTerminalRuleCall_1_2_0 = (RuleCall)cPropertyKeyAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLayoutKeyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLayoutKeyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLayoutKeySTRINGTerminalRuleCall_2_2_0 = (RuleCall)cLayoutKeyAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInteractiontypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInteractiontypeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInteractiontypeInteractiontypeParserRuleCall_3_2_0 = (RuleCall)cInteractiontypeAssignment_3_2.eContents().get(0);
		
		//CommonProperties:
		//	"->" ("propertyKey" "=" propertyKey=STRING)? ("layoutKey" "=" layoutKey=STRING)? ("interactiontype" "="
		//	interactiontype+=Interactiontype+)?;
		public ParserRule getRule() { return rule; }

		//"->" ("propertyKey" "=" propertyKey=STRING)? ("layoutKey" "=" layoutKey=STRING)? ("interactiontype" "="
		//interactiontype+=Interactiontype+)?
		public Group getGroup() { return cGroup; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//("propertyKey" "=" propertyKey=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"propertyKey"
		public Keyword getPropertyKeyKeyword_1_0() { return cPropertyKeyKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//propertyKey=STRING
		public Assignment getPropertyKeyAssignment_1_2() { return cPropertyKeyAssignment_1_2; }

		//STRING
		public RuleCall getPropertyKeySTRINGTerminalRuleCall_1_2_0() { return cPropertyKeySTRINGTerminalRuleCall_1_2_0; }

		//("layoutKey" "=" layoutKey=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"layoutKey"
		public Keyword getLayoutKeyKeyword_2_0() { return cLayoutKeyKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//layoutKey=STRING
		public Assignment getLayoutKeyAssignment_2_2() { return cLayoutKeyAssignment_2_2; }

		//STRING
		public RuleCall getLayoutKeySTRINGTerminalRuleCall_2_2_0() { return cLayoutKeySTRINGTerminalRuleCall_2_2_0; }

		//("interactiontype" "=" interactiontype+=Interactiontype+)?
		public Group getGroup_3() { return cGroup_3; }

		//"interactiontype"
		public Keyword getInteractiontypeKeyword_3_0() { return cInteractiontypeKeyword_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }

		//interactiontype+=Interactiontype+
		public Assignment getInteractiontypeAssignment_3_2() { return cInteractiontypeAssignment_3_2; }

		//Interactiontype
		public RuleCall getInteractiontypeInteractiontypeParserRuleCall_3_2_0() { return cInteractiontypeInteractiontypeParserRuleCall_3_2_0; }
	}
	
	
	private final UIDescriptionElements pUIDescription;
	private final TypeDefinitionElements pTypeDefinition;
	private final TypeElements pType;
	private final PropertyElements pProperty;
	private final LayoutElements pLayout;
	private final UsedDescriptionsElements pUsedDescriptions;
	private final DescriptionTypeElements pDescriptionType;
	private final ComplexComponentElements pComplexComponent;
	private final UIDescriptionImportElements pUIDescriptionImport;
	private final RefinementElements pRefinement;
	private final ComponentRefinementElements pComponentRefinement;
	private final DefinitionElements pDefinition;
	private final ComponentDefinitionElements pComponentDefinition;
	private final StructureElements pStructure;
	private final ElementElements pElement;
	private final TableRefinementElements pTableRefinement;
	private final TabViewRefinementElements pTabViewRefinement;
	private final TreeRefinementElements pTreeRefinement;
	private final InterchangeableRefinementElements pInterchangeableRefinement;
	private final TextareaRefinementElements pTextareaRefinement;
	private final TextfieldRefinementElements pTextfieldRefinement;
	private final ButtonRefinementElements pButtonRefinement;
	private final LabelRefinementElements pLabelRefinement;
	private final TabViewDefinitionElements pTabViewDefinition;
	private final TabDefinitionElements pTabDefinition;
	private final MultiselectionElements pMultiselection;
	private final TextfieldDefinitionElements pTextfieldDefinition;
	private final TextareaDefinitionElements pTextareaDefinition;
	private final TreeDefinitionElements pTreeDefinition;
	private final TableDefinitionElements pTableDefinition;
	private final InterchangeableDefinitionElements pInterchangeableDefinition;
	private final ButtonDefinitionElements pButtonDefinition;
	private final LabelDefinitionElements pLabelDefinition;
	private final InteractiontypeElements pInteractiontype;
	private final TextareaPropertiesElements pTextareaProperties;
	private final TextfieldPropertiesElements pTextfieldProperties;
	private final LabelPropertiesElements pLabelProperties;
	private final ButtonPropertiesElements pButtonProperties;
	private final CommonPropertiesElements pCommonProperties;
	private final TerminalRule tWS;
	private final TerminalRule tTABNAME;
	private final TerminalRule tINPUT_DESCRIPTION;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GuiDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUIDescription = new UIDescriptionElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pType = new TypeElements();
		this.pProperty = new PropertyElements();
		this.pLayout = new LayoutElements();
		this.pUsedDescriptions = new UsedDescriptionsElements();
		this.pDescriptionType = new DescriptionTypeElements();
		this.pComplexComponent = new ComplexComponentElements();
		this.pUIDescriptionImport = new UIDescriptionImportElements();
		this.pRefinement = new RefinementElements();
		this.pComponentRefinement = new ComponentRefinementElements();
		this.pDefinition = new DefinitionElements();
		this.pComponentDefinition = new ComponentDefinitionElements();
		this.pStructure = new StructureElements();
		this.pElement = new ElementElements();
		this.pTableRefinement = new TableRefinementElements();
		this.pTabViewRefinement = new TabViewRefinementElements();
		this.pTreeRefinement = new TreeRefinementElements();
		this.pInterchangeableRefinement = new InterchangeableRefinementElements();
		this.pTextareaRefinement = new TextareaRefinementElements();
		this.pTextfieldRefinement = new TextfieldRefinementElements();
		this.pButtonRefinement = new ButtonRefinementElements();
		this.pLabelRefinement = new LabelRefinementElements();
		this.pTabViewDefinition = new TabViewDefinitionElements();
		this.pTabDefinition = new TabDefinitionElements();
		this.pMultiselection = new MultiselectionElements();
		this.pTextfieldDefinition = new TextfieldDefinitionElements();
		this.pTextareaDefinition = new TextareaDefinitionElements();
		this.pTreeDefinition = new TreeDefinitionElements();
		this.pTableDefinition = new TableDefinitionElements();
		this.pInterchangeableDefinition = new InterchangeableDefinitionElements();
		this.pButtonDefinition = new ButtonDefinitionElements();
		this.pLabelDefinition = new LabelDefinitionElements();
		this.pInteractiontype = new InteractiontypeElements();
		this.pTextareaProperties = new TextareaPropertiesElements();
		this.pTextfieldProperties = new TextfieldPropertiesElements();
		this.pLabelProperties = new LabelPropertiesElements();
		this.pButtonProperties = new ButtonPropertiesElements();
		this.pCommonProperties = new CommonPropertiesElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tTABNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TABNAME");
		this.tINPUT_DESCRIPTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INPUT_DESCRIPTION");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.deg.xtext.gui.GuiDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UIDescription:
	//	typeDefinition=TypeDefinition property=Property? layout=Layout? usedDescriptions+=UsedDescriptions*
	//	refinements+=Refinement* definitions+=Definition* structure=Structure;
	public UIDescriptionElements getUIDescriptionAccess() {
		return pUIDescription;
	}
	
	public ParserRule getUIDescriptionRule() {
		return getUIDescriptionAccess().getRule();
	}

	//TypeDefinition:
	//	"type: " type=Type ";";
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//Type:
	//	id=("WINDOW" | "INNERCOMPLEX");
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Property:
	//	"get properties from:" propertiesFiles+=STRING+ ";";
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Layout:
	//	"get layout from:" layoutFiles+=STRING+ ";";
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}

	//UsedDescriptions:
	//	"use:" description=DescriptionType ("as:" id=STRING)? ";";
	public UsedDescriptionsElements getUsedDescriptionsAccess() {
		return pUsedDescriptions;
	}
	
	public ParserRule getUsedDescriptionsRule() {
		return getUsedDescriptionsAccess().getRule();
	}

	//DescriptionType:
	//	UIDescriptionImport | ComplexComponent;
	public DescriptionTypeElements getDescriptionTypeAccess() {
		return pDescriptionType;
	}
	
	public ParserRule getDescriptionTypeRule() {
		return getDescriptionTypeAccess().getRule();
	}

	//ComplexComponent:
	//	Multiselection;
	public ComplexComponentElements getComplexComponentAccess() {
		return pComplexComponent;
	}
	
	public ParserRule getComplexComponentRule() {
		return getComplexComponentAccess().getRule();
	}

	//UIDescriptionImport:
	//	descriptionName=STRING;
	public UIDescriptionImportElements getUIDescriptionImportAccess() {
		return pUIDescriptionImport;
	}
	
	public ParserRule getUIDescriptionImportRule() {
		return getUIDescriptionImportAccess().getRule();
	}

	//Refinement:
	//	concreteRefinement=ComponentRefinement ";";
	public RefinementElements getRefinementAccess() {
		return pRefinement;
	}
	
	public ParserRule getRefinementRule() {
		return getRefinementAccess().getRule();
	}

	//ComponentRefinement:
	//	LabelRefinement | ButtonRefinement | TextfieldRefinement | TextareaRefinement | TableRefinement | TabViewRefinement |
	//	TreeRefinement | InterchangeableRefinement;
	public ComponentRefinementElements getComponentRefinementAccess() {
		return pComponentRefinement;
	}
	
	public ParserRule getComponentRefinementRule() {
		return getComponentRefinementAccess().getRule();
	}

	//Definition:
	//	concreteDefition=ComponentDefinition ";";
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//ComponentDefinition:
	//	LabelDefinition | ButtonDefinition | TextfieldDefinition | TextareaDefinition | TreeDefinition | TableDefinition |
	//	TabViewDefinition | InterchangeableDefinition;
	public ComponentDefinitionElements getComponentDefinitionAccess() {
		return pComponentDefinition;
	}
	
	public ParserRule getComponentDefinitionRule() {
		return getComponentDefinitionAccess().getRule();
	}

	//Structure:
	//	name="Structure" ":" orderedElements+=Element* ";";
	public StructureElements getStructureAccess() {
		return pStructure;
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}

	//Element:
	//	id=STRING;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//TableRefinement:
	//	name="Table" inputType=INPUT_DESCRIPTION? "change:" id=STRING properties=CommonProperties?;
	public TableRefinementElements getTableRefinementAccess() {
		return pTableRefinement;
	}
	
	public ParserRule getTableRefinementRule() {
		return getTableRefinementAccess().getRule();
	}

	//TabViewRefinement:
	//	name="TabView" tabs+=TabDefinition? "change:" id=STRING properties=CommonProperties?;
	public TabViewRefinementElements getTabViewRefinementAccess() {
		return pTabViewRefinement;
	}
	
	public ParserRule getTabViewRefinementRule() {
		return getTabViewRefinementAccess().getRule();
	}

	//TreeRefinement:
	//	name="Tree" inputType=INPUT_DESCRIPTION? "change:" id=STRING properties=CommonProperties?;
	public TreeRefinementElements getTreeRefinementAccess() {
		return pTreeRefinement;
	}
	
	public ParserRule getTreeRefinementRule() {
		return getTreeRefinementAccess().getRule();
	}

	//InterchangeableRefinement:
	//	name="Interchangeable" "change:" id=STRING properties=CommonProperties?;
	public InterchangeableRefinementElements getInterchangeableRefinementAccess() {
		return pInterchangeableRefinement;
	}
	
	public ParserRule getInterchangeableRefinementRule() {
		return getInterchangeableRefinementAccess().getRule();
	}

	//TextareaRefinement:
	//	name="Textarea" "change:" id=STRING properties=TextareaProperties?;
	public TextareaRefinementElements getTextareaRefinementAccess() {
		return pTextareaRefinement;
	}
	
	public ParserRule getTextareaRefinementRule() {
		return getTextareaRefinementAccess().getRule();
	}

	//TextfieldRefinement:
	//	name="Textfield" "change:" id=STRING properties=TextfieldProperties?;
	public TextfieldRefinementElements getTextfieldRefinementAccess() {
		return pTextfieldRefinement;
	}
	
	public ParserRule getTextfieldRefinementRule() {
		return getTextfieldRefinementAccess().getRule();
	}

	//ButtonRefinement:
	//	name="Button" "change:" id=STRING properties=ButtonProperties?;
	public ButtonRefinementElements getButtonRefinementAccess() {
		return pButtonRefinement;
	}
	
	public ParserRule getButtonRefinementRule() {
		return getButtonRefinementAccess().getRule();
	}

	//LabelRefinement:
	//	name="Label" "change:" id=STRING properties=LabelProperties?;
	public LabelRefinementElements getLabelRefinementAccess() {
		return pLabelRefinement;
	}
	
	public ParserRule getLabelRefinementRule() {
		return getLabelRefinementAccess().getRule();
	}

	//TabViewDefinition:
	//	name="TabView" tabs+=TabDefinition* "as:" id=STRING properties=CommonProperties?;
	public TabViewDefinitionElements getTabViewDefinitionAccess() {
		return pTabViewDefinition;
	}
	
	public ParserRule getTabViewDefinitionRule() {
		return getTabViewDefinitionAccess().getRule();
	}

	//TabDefinition:
	//	name=TABNAME;
	public TabDefinitionElements getTabDefinitionAccess() {
		return pTabDefinition;
	}
	
	public ParserRule getTabDefinitionRule() {
		return getTabDefinitionAccess().getRule();
	}

	//Multiselection:
	//	name="Multiselection" inputType=INPUT_DESCRIPTION?;
	public MultiselectionElements getMultiselectionAccess() {
		return pMultiselection;
	}
	
	public ParserRule getMultiselectionRule() {
		return getMultiselectionAccess().getRule();
	}

	//TextfieldDefinition:
	//	name="Textfield" "as:" id=STRING properties=TextfieldProperties?;
	public TextfieldDefinitionElements getTextfieldDefinitionAccess() {
		return pTextfieldDefinition;
	}
	
	public ParserRule getTextfieldDefinitionRule() {
		return getTextfieldDefinitionAccess().getRule();
	}

	//TextareaDefinition:
	//	name="Textarea" "as:" id=STRING properties=TextareaProperties?;
	public TextareaDefinitionElements getTextareaDefinitionAccess() {
		return pTextareaDefinition;
	}
	
	public ParserRule getTextareaDefinitionRule() {
		return getTextareaDefinitionAccess().getRule();
	}

	//TreeDefinition:
	//	name="Tree" inputType=INPUT_DESCRIPTION "as:" id=STRING properties=CommonProperties?;
	public TreeDefinitionElements getTreeDefinitionAccess() {
		return pTreeDefinition;
	}
	
	public ParserRule getTreeDefinitionRule() {
		return getTreeDefinitionAccess().getRule();
	}

	//TableDefinition:
	//	name="Table" inputType=INPUT_DESCRIPTION "as:" id=STRING properties=CommonProperties?;
	public TableDefinitionElements getTableDefinitionAccess() {
		return pTableDefinition;
	}
	
	public ParserRule getTableDefinitionRule() {
		return getTableDefinitionAccess().getRule();
	}

	//InterchangeableDefinition:
	//	name="Interchangeable Area" "as:" id=STRING properties=CommonProperties?;
	public InterchangeableDefinitionElements getInterchangeableDefinitionAccess() {
		return pInterchangeableDefinition;
	}
	
	public ParserRule getInterchangeableDefinitionRule() {
		return getInterchangeableDefinitionAccess().getRule();
	}

	//ButtonDefinition:
	//	name="Button" "as:" id=STRING properties=ButtonProperties?;
	public ButtonDefinitionElements getButtonDefinitionAccess() {
		return pButtonDefinition;
	}
	
	public ParserRule getButtonDefinitionRule() {
		return getButtonDefinitionAccess().getRule();
	}

	//LabelDefinition:
	//	name="Label" "as:" id=STRING properties=LabelProperties?;
	public LabelDefinitionElements getLabelDefinitionAccess() {
		return pLabelDefinition;
	}
	
	public ParserRule getLabelDefinitionRule() {
		return getLabelDefinitionAccess().getRule();
	}

	//Interactiontype:
	//	id=("IfActivator" | "IfTextDisplay" | "IfViewImage");
	public InteractiontypeElements getInteractiontypeAccess() {
		return pInteractiontype;
	}
	
	public ParserRule getInteractiontypeRule() {
		return getInteractiontypeAccess().getRule();
	}

	//TextareaProperties:
	//	commonProperties=CommonProperties ("text=" text=STRING)? ("editable=" editable=BOOLEAN)?;
	public TextareaPropertiesElements getTextareaPropertiesAccess() {
		return pTextareaProperties;
	}
	
	public ParserRule getTextareaPropertiesRule() {
		return getTextareaPropertiesAccess().getRule();
	}

	//TextfieldProperties:
	//	commonProperties=CommonProperties ("text=" text=STRING)? ("editable=" editable=BOOLEAN)?;
	public TextfieldPropertiesElements getTextfieldPropertiesAccess() {
		return pTextfieldProperties;
	}
	
	public ParserRule getTextfieldPropertiesRule() {
		return getTextfieldPropertiesAccess().getRule();
	}

	//LabelProperties:
	//	commonProperties=CommonProperties ("text=" text=STRING)?;
	public LabelPropertiesElements getLabelPropertiesAccess() {
		return pLabelProperties;
	}
	
	public ParserRule getLabelPropertiesRule() {
		return getLabelPropertiesAccess().getRule();
	}

	//ButtonProperties:
	//	commonProperties=CommonProperties ("text=" text=STRING)?;
	public ButtonPropertiesElements getButtonPropertiesAccess() {
		return pButtonProperties;
	}
	
	public ParserRule getButtonPropertiesRule() {
		return getButtonPropertiesAccess().getRule();
	}

	//CommonProperties:
	//	"->" ("propertyKey" "=" propertyKey=STRING)? ("layoutKey" "=" layoutKey=STRING)? ("interactiontype" "="
	//	interactiontype+=Interactiontype+)?;
	public CommonPropertiesElements getCommonPropertiesAccess() {
		return pCommonProperties;
	}
	
	public ParserRule getCommonPropertiesRule() {
		return getCommonPropertiesAccess().getRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n" | ",")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal TABNAME:
	//	"[" !("[" | "]")* "]";
	public TerminalRule getTABNAMERule() {
		return tTABNAME;
	} 

	//terminal INPUT_DESCRIPTION:
	//	"<" !("<" | ">")* ">";
	public TerminalRule getINPUT_DESCRIPTIONRule() {
		return tINPUT_DESCRIPTION;
	} 

	////'\\' . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | 
	//terminal BOOLEAN:
	//	"TRUE" | "FALSE";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
