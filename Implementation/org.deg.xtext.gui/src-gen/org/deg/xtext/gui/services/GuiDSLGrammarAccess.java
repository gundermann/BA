/*
* generated by Xtext
*/
package org.deg.xtext.gui.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GuiDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UIDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_0_0 = (RuleCall)cTypeDefinitionAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Assignment cUsedDescriptionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsedDescriptionsUsedDescriptionsParserRuleCall_2_0 = (RuleCall)cUsedDescriptionsAssignment_2.eContents().get(0);
		private final Assignment cRefinementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefinementsRefinementParserRuleCall_3_0 = (RuleCall)cRefinementsAssignment_3.eContents().get(0);
		private final Assignment cDefinitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_4_0 = (RuleCall)cDefinitionsAssignment_4.eContents().get(0);
		private final Assignment cStructureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStructureStructureParserRuleCall_5_0 = (RuleCall)cStructureAssignment_5.eContents().get(0);
		
		//UIDescription:
		//	typeDefinition=TypeDefinition property=Property? usedDescriptions+=UsedDescriptions* refinements+=Refinement*
		//	definitions+=Definition* structure=Structure;
		public ParserRule getRule() { return rule; }

		//typeDefinition=TypeDefinition property=Property? usedDescriptions+=UsedDescriptions* refinements+=Refinement*
		//definitions+=Definition* structure=Structure
		public Group getGroup() { return cGroup; }

		//typeDefinition=TypeDefinition
		public Assignment getTypeDefinitionAssignment_0() { return cTypeDefinitionAssignment_0; }

		//TypeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_0_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_0_0; }

		//property=Property?
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_0() { return cPropertyPropertyParserRuleCall_1_0; }

		//usedDescriptions+=UsedDescriptions*
		public Assignment getUsedDescriptionsAssignment_2() { return cUsedDescriptionsAssignment_2; }

		//UsedDescriptions
		public RuleCall getUsedDescriptionsUsedDescriptionsParserRuleCall_2_0() { return cUsedDescriptionsUsedDescriptionsParserRuleCall_2_0; }

		//refinements+=Refinement*
		public Assignment getRefinementsAssignment_3() { return cRefinementsAssignment_3; }

		//Refinement
		public RuleCall getRefinementsRefinementParserRuleCall_3_0() { return cRefinementsRefinementParserRuleCall_3_0; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_4() { return cDefinitionsAssignment_4; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_4_0() { return cDefinitionsDefinitionParserRuleCall_4_0; }

		//structure=Structure
		public Assignment getStructureAssignment_5() { return cStructureAssignment_5; }

		//Structure
		public RuleCall getStructureStructureParserRuleCall_5_0() { return cStructureStructureParserRuleCall_5_0; }
	}

	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameStructureKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderedElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderedElementsElementParserRuleCall_2_0 = (RuleCall)cOrderedElementsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Structure:
		//	name="Structure" ":" orderedElements+=Element* ";";
		public ParserRule getRule() { return rule; }

		//name="Structure" ":" orderedElements+=Element* ";"
		public Group getGroup() { return cGroup; }

		//name="Structure"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Structure"
		public Keyword getNameStructureKeyword_0_0() { return cNameStructureKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//orderedElements+=Element*
		public Assignment getOrderedElementsAssignment_2() { return cOrderedElementsAssignment_2; }

		//Element
		public RuleCall getOrderedElementsElementParserRuleCall_2_0() { return cOrderedElementsElementParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdSTRINGTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Element:
		//	id=STRING;
		public ParserRule getRule() { return rule; }

		//id=STRING
		public Assignment getIdAssignment() { return cIdAssignment; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_0() { return cIdSTRINGTerminalRuleCall_0; }
	}

	public class RefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Refinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConcreteRefinementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConcreteRefinementComponentRefinementParserRuleCall_0_0 = (RuleCall)cConcreteRefinementAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Refinement:
		//	concreteRefinement=ComponentRefinement ";";
		public ParserRule getRule() { return rule; }

		//concreteRefinement=ComponentRefinement ";"
		public Group getGroup() { return cGroup; }

		//concreteRefinement=ComponentRefinement
		public Assignment getConcreteRefinementAssignment_0() { return cConcreteRefinementAssignment_0; }

		//ComponentRefinement
		public RuleCall getConcreteRefinementComponentRefinementParserRuleCall_0_0() { return cConcreteRefinementComponentRefinementParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ComponentRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentRefinement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelRefinementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonRefinementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComponentRefinement:
		//	LabelRefinement | ButtonRefinement;
		public ParserRule getRule() { return rule; }

		//LabelRefinement | ButtonRefinement
		public Alternatives getAlternatives() { return cAlternatives; }

		//LabelRefinement
		public RuleCall getLabelRefinementParserRuleCall_0() { return cLabelRefinementParserRuleCall_0; }

		//ButtonRefinement
		public RuleCall getButtonRefinementParserRuleCall_1() { return cButtonRefinementParserRuleCall_1; }
	}

	public class ButtonRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameButtonKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//ButtonRefinement:
		//	name="Button" "from:" id=STRING properties=Properties?;
		public ParserRule getRule() { return rule; }

		//name="Button" "from:" id=STRING properties=Properties?
		public Group getGroup() { return cGroup; }

		//name="Button"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Button"
		public Keyword getNameButtonKeyword_0_0() { return cNameButtonKeyword_0_0; }

		//"from:"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=Properties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_3_0() { return cPropertiesPropertiesParserRuleCall_3_0; }
	}

	public class LabelRefinementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelRefinement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLabelKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//LabelRefinement:
		//	name="Label" "from:" id=STRING properties=Properties?;
		public ParserRule getRule() { return rule; }

		//name="Label" "from:" id=STRING properties=Properties?
		public Group getGroup() { return cGroup; }

		//name="Label"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Label"
		public Keyword getNameLabelKeyword_0_0() { return cNameLabelKeyword_0_0; }

		//"from:"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=Properties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_3_0() { return cPropertiesPropertiesParserRuleCall_3_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetPropertiesFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cPropertiesFileAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Property:
		//	"get properties from:" propertiesFile=STRING ";";
		public ParserRule getRule() { return rule; }

		//"get properties from:" propertiesFile=STRING ";"
		public Group getGroup() { return cGroup; }

		//"get properties from:"
		public Keyword getGetPropertiesFromKeyword_0() { return cGetPropertiesFromKeyword_0; }

		//propertiesFile=STRING
		public Assignment getPropertiesFileAssignment_1() { return cPropertiesFileAssignment_1; }

		//STRING
		public RuleCall getPropertiesFileSTRINGTerminalRuleCall_1_0() { return cPropertiesFileSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class UsedDescriptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsedDescriptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionDescriptionTypeParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UsedDescriptions:
		//	"use:" description=DescriptionType ("as:" id=STRING)? ";";
		public ParserRule getRule() { return rule; }

		//"use:" description=DescriptionType ("as:" id=STRING)? ";"
		public Group getGroup() { return cGroup; }

		//"use:"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//description=DescriptionType
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//DescriptionType
		public RuleCall getDescriptionDescriptionTypeParserRuleCall_1_0() { return cDescriptionDescriptionTypeParserRuleCall_1_0; }

		//("as:" id=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"as:"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//id=STRING
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_1_0() { return cIdSTRINGTerminalRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DescriptionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescriptionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUIDescriptionImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DescriptionType:
		//	UIDescriptionImport | ComplexComponent;
		public ParserRule getRule() { return rule; }

		//UIDescriptionImport | ComplexComponent
		public Alternatives getAlternatives() { return cAlternatives; }

		//UIDescriptionImport
		public RuleCall getUIDescriptionImportParserRuleCall_0() { return cUIDescriptionImportParserRuleCall_0; }

		//ComplexComponent
		public RuleCall getComplexComponentParserRuleCall_1() { return cComplexComponentParserRuleCall_1; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConcreteDefitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConcreteDefitionComponentDefinitionParserRuleCall_0_0 = (RuleCall)cConcreteDefitionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Definition:
		//	concreteDefition=ComponentDefinition ";";
		public ParserRule getRule() { return rule; }

		//concreteDefition=ComponentDefinition ";"
		public Group getGroup() { return cGroup; }

		//concreteDefition=ComponentDefinition
		public Assignment getConcreteDefitionAssignment_0() { return cConcreteDefitionAssignment_0; }

		//ComponentDefinition
		public RuleCall getConcreteDefitionComponentDefinitionParserRuleCall_0_0() { return cConcreteDefitionComponentDefinitionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeDefinition:
		//	"type: " type=Type ";";
		public ParserRule getRule() { return rule; }

		//"type: " type=Type ";"
		public Group getGroup() { return cGroup; }

		//"type: "
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cIdAlternatives_0 = (Alternatives)cIdAssignment.eContents().get(0);
		private final Keyword cIdWINDOWKeyword_0_0 = (Keyword)cIdAlternatives_0.eContents().get(0);
		private final Keyword cIdINNERCOMPLEXKeyword_0_1 = (Keyword)cIdAlternatives_0.eContents().get(1);
		
		//Type:
		//	id=("WINDOW" | "INNERCOMPLEX");
		public ParserRule getRule() { return rule; }

		//id=("WINDOW" | "INNERCOMPLEX")
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"WINDOW" | "INNERCOMPLEX"
		public Alternatives getIdAlternatives_0() { return cIdAlternatives_0; }

		//"WINDOW"
		public Keyword getIdWINDOWKeyword_0_0() { return cIdWINDOWKeyword_0_0; }

		//"INNERCOMPLEX"
		public Keyword getIdINNERCOMPLEXKeyword_0_1() { return cIdINNERCOMPLEXKeyword_0_1; }
	}

	public class UIDescriptionImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIDescriptionImport");
		private final Assignment cDescriptionNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDescriptionNameSTRINGTerminalRuleCall_0 = (RuleCall)cDescriptionNameAssignment.eContents().get(0);
		
		//UIDescriptionImport:
		//	descriptionName=STRING;
		public ParserRule getRule() { return rule; }

		//descriptionName=STRING
		public Assignment getDescriptionNameAssignment() { return cDescriptionNameAssignment; }

		//STRING
		public RuleCall getDescriptionNameSTRINGTerminalRuleCall_0() { return cDescriptionNameSTRINGTerminalRuleCall_0; }
	}

	public class ComplexComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultiselectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTabViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComplexComponent:
		//	Multiselection | TabView;
		public ParserRule getRule() { return rule; }

		//Multiselection | TabView
		public Alternatives getAlternatives() { return cAlternatives; }

		//Multiselection
		public RuleCall getMultiselectionParserRuleCall_0() { return cMultiselectionParserRuleCall_0; }

		//TabView
		public RuleCall getTabViewParserRuleCall_1() { return cTabViewParserRuleCall_1; }
	}

	public class TabViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TabView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTabViewKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cTabsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTabsTabDefinitionParserRuleCall_1_0 = (RuleCall)cTabsAssignment_1.eContents().get(0);
		
		//TabView:
		//	name="TabView" tabs+=TabDefinition*;
		public ParserRule getRule() { return rule; }

		//name="TabView" tabs+=TabDefinition*
		public Group getGroup() { return cGroup; }

		//name="TabView"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"TabView"
		public Keyword getNameTabViewKeyword_0_0() { return cNameTabViewKeyword_0_0; }

		//tabs+=TabDefinition*
		public Assignment getTabsAssignment_1() { return cTabsAssignment_1; }

		//TabDefinition
		public RuleCall getTabsTabDefinitionParserRuleCall_1_0() { return cTabsTabDefinitionParserRuleCall_1_0; }
	}

	public class TabDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TabDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTABNAMETerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TabDefinition:
		//	name=TABNAME;
		public ParserRule getRule() { return rule; }

		//name=TABNAME
		public Assignment getNameAssignment() { return cNameAssignment; }

		//TABNAME
		public RuleCall getNameTABNAMETerminalRuleCall_0() { return cNameTABNAMETerminalRuleCall_0; }
	}

	public class MultiselectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiselection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMultiselectionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cInputTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0 = (RuleCall)cInputTypeAssignment_1.eContents().get(0);
		
		//Multiselection:
		//	name="Multiselection" inputType=INPUT_DESCRIPTION?;
		public ParserRule getRule() { return rule; }

		//name="Multiselection" inputType=INPUT_DESCRIPTION?
		public Group getGroup() { return cGroup; }

		//name="Multiselection"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Multiselection"
		public Keyword getNameMultiselectionKeyword_0_0() { return cNameMultiselectionKeyword_0_0; }

		//inputType=INPUT_DESCRIPTION?
		public Assignment getInputTypeAssignment_1() { return cInputTypeAssignment_1; }

		//INPUT_DESCRIPTION
		public RuleCall getInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0() { return cInputTypeINPUT_DESCRIPTIONTerminalRuleCall_1_0; }
	}

	public class ComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComponentDefinition:
		//	LabelDefinition | ButtonDefinition;
		public ParserRule getRule() { return rule; }

		//LabelDefinition | ButtonDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//LabelDefinition
		public RuleCall getLabelDefinitionParserRuleCall_0() { return cLabelDefinitionParserRuleCall_0; }

		//ButtonDefinition
		public RuleCall getButtonDefinitionParserRuleCall_1() { return cButtonDefinitionParserRuleCall_1; }
	}

	public class ButtonDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameButtonKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//ButtonDefinition:
		//	name="Button" "as:" id=STRING properties=Properties?;
		public ParserRule getRule() { return rule; }

		//name="Button" "as:" id=STRING properties=Properties?
		public Group getGroup() { return cGroup; }

		//name="Button"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Button"
		public Keyword getNameButtonKeyword_0_0() { return cNameButtonKeyword_0_0; }

		//"as:"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=Properties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_3_0() { return cPropertiesPropertiesParserRuleCall_3_0; }
	}

	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Properties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertiesDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesDefinitionsPropertiesDefinitionParserRuleCall_1_0 = (RuleCall)cPropertiesDefinitionsAssignment_1.eContents().get(0);
		
		//Properties:
		//	"->" propertiesDefinitions+=PropertiesDefinition+;
		public ParserRule getRule() { return rule; }

		//"->" propertiesDefinitions+=PropertiesDefinition+
		public Group getGroup() { return cGroup; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//propertiesDefinitions+=PropertiesDefinition+
		public Assignment getPropertiesDefinitionsAssignment_1() { return cPropertiesDefinitionsAssignment_1; }

		//PropertiesDefinition
		public RuleCall getPropertiesDefinitionsPropertiesDefinitionParserRuleCall_1_0() { return cPropertiesDefinitionsPropertiesDefinitionParserRuleCall_1_0; }
	}

	public class PropertiesDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertiesDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPropertyKeyKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPropertyKeyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPropertyKeySTRINGTerminalRuleCall_0_1_0 = (RuleCall)cPropertyKeyAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTextKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTextAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cInteractiontypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInteractiontypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInteractiontypeInteractiontypeParserRuleCall_2_1_0 = (RuleCall)cInteractiontypeAssignment_2_1.eContents().get(0);
		
		//PropertiesDefinition:
		//	"propertyKey=" propertyKey=STRING | "text=" text=STRING | "interactiontype=" interactiontype+=Interactiontype+;
		public ParserRule getRule() { return rule; }

		//"propertyKey=" propertyKey=STRING | "text=" text=STRING | "interactiontype=" interactiontype+=Interactiontype+
		public Alternatives getAlternatives() { return cAlternatives; }

		//"propertyKey=" propertyKey=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"propertyKey="
		public Keyword getPropertyKeyKeyword_0_0() { return cPropertyKeyKeyword_0_0; }

		//propertyKey=STRING
		public Assignment getPropertyKeyAssignment_0_1() { return cPropertyKeyAssignment_0_1; }

		//STRING
		public RuleCall getPropertyKeySTRINGTerminalRuleCall_0_1_0() { return cPropertyKeySTRINGTerminalRuleCall_0_1_0; }

		//"text=" text=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"text="
		public Keyword getTextKeyword_1_0() { return cTextKeyword_1_0; }

		//text=STRING
		public Assignment getTextAssignment_1_1() { return cTextAssignment_1_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_1_0() { return cTextSTRINGTerminalRuleCall_1_1_0; }

		//"interactiontype=" interactiontype+=Interactiontype+
		public Group getGroup_2() { return cGroup_2; }

		//"interactiontype="
		public Keyword getInteractiontypeKeyword_2_0() { return cInteractiontypeKeyword_2_0; }

		//interactiontype+=Interactiontype+
		public Assignment getInteractiontypeAssignment_2_1() { return cInteractiontypeAssignment_2_1; }

		//Interactiontype
		public RuleCall getInteractiontypeInteractiontypeParserRuleCall_2_1_0() { return cInteractiontypeInteractiontypeParserRuleCall_2_1_0; }
	}

	public class LabelDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLabelKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		
		//LabelDefinition:
		//	name="Label" "as" id=STRING properties=Properties?;
		public ParserRule getRule() { return rule; }

		//name="Label" "as" id=STRING properties=Properties?
		public Group getGroup() { return cGroup; }

		//name="Label"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Label"
		public Keyword getNameLabelKeyword_0_0() { return cNameLabelKeyword_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }

		//properties=Properties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_3_0() { return cPropertiesPropertiesParserRuleCall_3_0; }
	}

	public class InteractiontypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interactiontype");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cIdAlternatives_0 = (Alternatives)cIdAssignment.eContents().get(0);
		private final Keyword cIdClickKeyword_0_0 = (Keyword)cIdAlternatives_0.eContents().get(0);
		private final Keyword cIdChangeTextKeyword_0_1 = (Keyword)cIdAlternatives_0.eContents().get(1);
		
		//Interactiontype:
		//	id=("Click" | "ChangeText");
		public ParserRule getRule() { return rule; }

		//id=("Click" | "ChangeText")
		public Assignment getIdAssignment() { return cIdAssignment; }

		//"Click" | "ChangeText"
		public Alternatives getIdAlternatives_0() { return cIdAlternatives_0; }

		//"Click"
		public Keyword getIdClickKeyword_0_0() { return cIdClickKeyword_0_0; }

		//"ChangeText"
		public Keyword getIdChangeTextKeyword_0_1() { return cIdChangeTextKeyword_0_1; }
	}
	
	
	private final UIDescriptionElements pUIDescription;
	private final StructureElements pStructure;
	private final ElementElements pElement;
	private final RefinementElements pRefinement;
	private final ComponentRefinementElements pComponentRefinement;
	private final ButtonRefinementElements pButtonRefinement;
	private final LabelRefinementElements pLabelRefinement;
	private final PropertyElements pProperty;
	private final UsedDescriptionsElements pUsedDescriptions;
	private final DescriptionTypeElements pDescriptionType;
	private final DefinitionElements pDefinition;
	private final TypeDefinitionElements pTypeDefinition;
	private final TypeElements pType;
	private final UIDescriptionImportElements pUIDescriptionImport;
	private final ComplexComponentElements pComplexComponent;
	private final TabViewElements pTabView;
	private final TabDefinitionElements pTabDefinition;
	private final TerminalRule tTABNAME;
	private final MultiselectionElements pMultiselection;
	private final TerminalRule tINPUT_DESCRIPTION;
	private final ComponentDefinitionElements pComponentDefinition;
	private final ButtonDefinitionElements pButtonDefinition;
	private final PropertiesElements pProperties;
	private final PropertiesDefinitionElements pPropertiesDefinition;
	private final LabelDefinitionElements pLabelDefinition;
	private final InteractiontypeElements pInteractiontype;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GuiDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUIDescription = new UIDescriptionElements();
		this.pStructure = new StructureElements();
		this.pElement = new ElementElements();
		this.pRefinement = new RefinementElements();
		this.pComponentRefinement = new ComponentRefinementElements();
		this.pButtonRefinement = new ButtonRefinementElements();
		this.pLabelRefinement = new LabelRefinementElements();
		this.pProperty = new PropertyElements();
		this.pUsedDescriptions = new UsedDescriptionsElements();
		this.pDescriptionType = new DescriptionTypeElements();
		this.pDefinition = new DefinitionElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pType = new TypeElements();
		this.pUIDescriptionImport = new UIDescriptionImportElements();
		this.pComplexComponent = new ComplexComponentElements();
		this.pTabView = new TabViewElements();
		this.pTabDefinition = new TabDefinitionElements();
		this.tTABNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TABNAME");
		this.pMultiselection = new MultiselectionElements();
		this.tINPUT_DESCRIPTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INPUT_DESCRIPTION");
		this.pComponentDefinition = new ComponentDefinitionElements();
		this.pButtonDefinition = new ButtonDefinitionElements();
		this.pProperties = new PropertiesElements();
		this.pPropertiesDefinition = new PropertiesDefinitionElements();
		this.pLabelDefinition = new LabelDefinitionElements();
		this.pInteractiontype = new InteractiontypeElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.deg.xtext.gui.GuiDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UIDescription:
	//	typeDefinition=TypeDefinition property=Property? usedDescriptions+=UsedDescriptions* refinements+=Refinement*
	//	definitions+=Definition* structure=Structure;
	public UIDescriptionElements getUIDescriptionAccess() {
		return pUIDescription;
	}
	
	public ParserRule getUIDescriptionRule() {
		return getUIDescriptionAccess().getRule();
	}

	//Structure:
	//	name="Structure" ":" orderedElements+=Element* ";";
	public StructureElements getStructureAccess() {
		return pStructure;
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}

	//Element:
	//	id=STRING;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Refinement:
	//	concreteRefinement=ComponentRefinement ";";
	public RefinementElements getRefinementAccess() {
		return pRefinement;
	}
	
	public ParserRule getRefinementRule() {
		return getRefinementAccess().getRule();
	}

	//ComponentRefinement:
	//	LabelRefinement | ButtonRefinement;
	public ComponentRefinementElements getComponentRefinementAccess() {
		return pComponentRefinement;
	}
	
	public ParserRule getComponentRefinementRule() {
		return getComponentRefinementAccess().getRule();
	}

	//ButtonRefinement:
	//	name="Button" "from:" id=STRING properties=Properties?;
	public ButtonRefinementElements getButtonRefinementAccess() {
		return pButtonRefinement;
	}
	
	public ParserRule getButtonRefinementRule() {
		return getButtonRefinementAccess().getRule();
	}

	//LabelRefinement:
	//	name="Label" "from:" id=STRING properties=Properties?;
	public LabelRefinementElements getLabelRefinementAccess() {
		return pLabelRefinement;
	}
	
	public ParserRule getLabelRefinementRule() {
		return getLabelRefinementAccess().getRule();
	}

	//Property:
	//	"get properties from:" propertiesFile=STRING ";";
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//UsedDescriptions:
	//	"use:" description=DescriptionType ("as:" id=STRING)? ";";
	public UsedDescriptionsElements getUsedDescriptionsAccess() {
		return pUsedDescriptions;
	}
	
	public ParserRule getUsedDescriptionsRule() {
		return getUsedDescriptionsAccess().getRule();
	}

	//DescriptionType:
	//	UIDescriptionImport | ComplexComponent;
	public DescriptionTypeElements getDescriptionTypeAccess() {
		return pDescriptionType;
	}
	
	public ParserRule getDescriptionTypeRule() {
		return getDescriptionTypeAccess().getRule();
	}

	//Definition:
	//	concreteDefition=ComponentDefinition ";";
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//TypeDefinition:
	//	"type: " type=Type ";";
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//Type:
	//	id=("WINDOW" | "INNERCOMPLEX");
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//UIDescriptionImport:
	//	descriptionName=STRING;
	public UIDescriptionImportElements getUIDescriptionImportAccess() {
		return pUIDescriptionImport;
	}
	
	public ParserRule getUIDescriptionImportRule() {
		return getUIDescriptionImportAccess().getRule();
	}

	//ComplexComponent:
	//	Multiselection | TabView;
	public ComplexComponentElements getComplexComponentAccess() {
		return pComplexComponent;
	}
	
	public ParserRule getComplexComponentRule() {
		return getComplexComponentAccess().getRule();
	}

	//TabView:
	//	name="TabView" tabs+=TabDefinition*;
	public TabViewElements getTabViewAccess() {
		return pTabView;
	}
	
	public ParserRule getTabViewRule() {
		return getTabViewAccess().getRule();
	}

	//TabDefinition:
	//	name=TABNAME;
	public TabDefinitionElements getTabDefinitionAccess() {
		return pTabDefinition;
	}
	
	public ParserRule getTabDefinitionRule() {
		return getTabDefinitionAccess().getRule();
	}

	//terminal TABNAME:
	//	"[" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("[" | "]"))* "]";
	public TerminalRule getTABNAMERule() {
		return tTABNAME;
	} 

	//Multiselection:
	//	name="Multiselection" inputType=INPUT_DESCRIPTION?;
	public MultiselectionElements getMultiselectionAccess() {
		return pMultiselection;
	}
	
	public ParserRule getMultiselectionRule() {
		return getMultiselectionAccess().getRule();
	}

	//terminal INPUT_DESCRIPTION:
	//	"<" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("<" | ">"))* ">";
	public TerminalRule getINPUT_DESCRIPTIONRule() {
		return tINPUT_DESCRIPTION;
	} 

	//ComponentDefinition:
	//	LabelDefinition | ButtonDefinition;
	public ComponentDefinitionElements getComponentDefinitionAccess() {
		return pComponentDefinition;
	}
	
	public ParserRule getComponentDefinitionRule() {
		return getComponentDefinitionAccess().getRule();
	}

	//ButtonDefinition:
	//	name="Button" "as:" id=STRING properties=Properties?;
	public ButtonDefinitionElements getButtonDefinitionAccess() {
		return pButtonDefinition;
	}
	
	public ParserRule getButtonDefinitionRule() {
		return getButtonDefinitionAccess().getRule();
	}

	//Properties:
	//	"->" propertiesDefinitions+=PropertiesDefinition+;
	public PropertiesElements getPropertiesAccess() {
		return pProperties;
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}

	//PropertiesDefinition:
	//	"propertyKey=" propertyKey=STRING | "text=" text=STRING | "interactiontype=" interactiontype+=Interactiontype+;
	public PropertiesDefinitionElements getPropertiesDefinitionAccess() {
		return pPropertiesDefinition;
	}
	
	public ParserRule getPropertiesDefinitionRule() {
		return getPropertiesDefinitionAccess().getRule();
	}

	//LabelDefinition:
	//	name="Label" "as" id=STRING properties=Properties?;
	public LabelDefinitionElements getLabelDefinitionAccess() {
		return pLabelDefinition;
	}
	
	public ParserRule getLabelDefinitionRule() {
		return getLabelDefinitionAccess().getRule();
	}

	//Interactiontype:
	//	id=("Click" | "ChangeText");
	public InteractiontypeElements getInteractiontypeAccess() {
		return pInteractiontype;
	}
	
	public ParserRule getInteractiontypeRule() {
		return getInteractiontypeAccess().getRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n" | ",")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
