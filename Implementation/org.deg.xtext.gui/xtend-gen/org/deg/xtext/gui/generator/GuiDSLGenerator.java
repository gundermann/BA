/**
 * generated by Xtext
 */
package org.deg.xtext.gui.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.deg.xtext.gui.guiDSL.AreaAssignment;
import org.deg.xtext.gui.guiDSL.ButtonDefinition;
import org.deg.xtext.gui.guiDSL.CheckboxDefinition;
import org.deg.xtext.gui.guiDSL.CommonProperty;
import org.deg.xtext.gui.guiDSL.ComponentDefinition;
import org.deg.xtext.gui.guiDSL.Definition;
import org.deg.xtext.gui.guiDSL.Interaction;
import org.deg.xtext.gui.guiDSL.LabelDefinition;
import org.deg.xtext.gui.guiDSL.MultiSelectionDefinition;
import org.deg.xtext.gui.guiDSL.Property;
import org.deg.xtext.gui.guiDSL.RadioboxDefinition;
import org.deg.xtext.gui.guiDSL.TextfieldDefinition;
import org.deg.xtext.gui.guiDSL.TypeDefinition;
import org.deg.xtext.gui.guiDSL.UIAction;
import org.deg.xtext.gui.guiDSL.UIDescription;
import org.deg.xtext.gui.guiDSL.UIDescriptionImport;
import org.deg.xtext.gui.guiDSL.UsedDescriptions;
import org.deg.xtext.gui.guiDSL.inputType;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class GuiDSLGenerator implements IGenerator {
  private String name;
  
  private List<String> imports = new ArrayList<String>();
  
  private Boolean compiled = Boolean.valueOf(false);
  
  private List<Interaction> interactions = new ArrayList<Interaction>();
  
  private Map<String, String> uiElemetsToType = new HashMap<String, String>();
  
  private List<String> globalVars = new ArrayList<String>();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    URI _uRI = resource.getURI();
    String _segment = _uRI.segment(3);
    String[] _split = _segment.split("\\.");
    String _get = _split[0];
    this.name = _get;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Definition> _filter = Iterables.<Definition>filter(_iterable, Definition.class);
    for (final Definition def : _filter) {
      {
        ComponentDefinition _concreteDefition = def.getConcreteDefition();
        String element = _concreteDefition.getName();
        ComponentDefinition _concreteDefition_1 = def.getConcreteDefition();
        String type = _concreteDefition_1.getType();
        this.uiElemetsToType.put(element, type);
      }
    }
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<UIDescription> _filter_1 = Iterables.<UIDescription>filter(_iterable_1, UIDescription.class);
    for (final UIDescription d : _filter_1) {
      {
        TypeDefinition _typeDefinition = d.getTypeDefinition();
        String _type = _typeDefinition.getType();
        boolean _equals = _type.equals("WINDOW");
        if (_equals) {
          CharSequence source = this.compileWindow(d);
          String _genImports = this.genImports();
          String _plus = (_genImports + source);
          fsa.generateFile((this.name + ".java"), _plus);
        } else {
          CharSequence source_1 = this.compileComplex(d);
          String _genImports_1 = this.genImports();
          String _plus_1 = (_genImports_1 + source_1);
          fsa.generateFile((this.name + ".java"), _plus_1);
        }
        this.imports.clear();
        this.globalVars.clear();
        this.interactions.clear();
      }
    }
  }
  
  public String genImports() {
    StringBuilder sb = new StringBuilder();
    for (final String import_ : this.imports) {
      StringBuilder _append = sb.append(import_);
      _append.append("\n");
    }
    return sb.toString();
  }
  
  public CharSequence compileComplex(final UIDescription description) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.Node;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _addImport_1 = this.addImport("import javafx.scene.layout.Pane;");
    _builder.append(_addImport_1, "");
    _builder.newLineIfNotEmpty();
    String _addImport_2 = this.addImport("import javafx.scene.layout.VBox;");
    _builder.append(_addImport_2, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated by Xtext.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.name, "");
    _builder.append(" extends Pane{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(this.name, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("VBox b = new VBox();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getChildren().add(b);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("initBox(b);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    CharSequence _initMainBox = this.getInitMainBox(description);
    _builder.append(_initMainBox, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated interactions.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    CharSequence _genInteractions = this.genInteractions();
    _builder.append(_genInteractions, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated global variables.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    CharSequence _genGlobalVars = this.genGlobalVars();
    _builder.append(_genGlobalVars, "");
    _builder.newLineIfNotEmpty();
    _builder.append("}\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getInitMainBox(final UIDescription description) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public void initBox(VBox b){");
    _builder.newLine();
    {
      EList<AreaAssignment> _areas = description.getAreas();
      for(final AreaAssignment area : _areas) {
        _builder.append("\t\t");
        _builder.append("b.getChildren().add(initArea");
        int _area = area.getArea();
        _builder.append(_area, "\t\t");
        _builder.append("());\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<AreaAssignment> _areas_1 = description.getAreas();
      for(final AreaAssignment area_1 : _areas_1) {
        _builder.append("\t\t");
        _builder.append("public Node initArea");
        int _area_1 = area_1.getArea();
        _builder.append(_area_1, "\t\t");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        {
          EList<Definition> _definitions = description.getDefinitions();
          for(final Definition def : _definitions) {
            {
              String _element = area_1.getElement();
              ComponentDefinition _concreteDefition = def.getConcreteDefition();
              String _name = _concreteDefition.getName();
              boolean _equals = _element.equals(_name);
              if (_equals) {
                _builder.append("\t\t");
                _builder.append("\t");
                CharSequence _compileDefinition = this.compileDefinition(def);
                _builder.append(_compileDefinition, "\t\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          if ((!(this.compiled).booleanValue())) {
            {
              EList<UsedDescriptions> _usedDescriptions = description.getUsedDescriptions();
              for(final UsedDescriptions used : _usedDescriptions) {
                {
                  boolean _or = false;
                  UIDescriptionImport _description = used.getDescription();
                  String _descriptionName = _description.getDescriptionName();
                  String _element_1 = area_1.getElement();
                  boolean _equals_1 = _descriptionName.equals(_element_1);
                  if (_equals_1) {
                    _or = true;
                  } else {
                    UIDescriptionImport _description_1 = used.getDescription();
                    String _localName = _description_1.getLocalName();
                    String _element_2 = area_1.getElement();
                    boolean _equals_2 = _localName.equals(_element_2);
                    _or = _equals_2;
                  }
                  if (_or) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("return new ");
                    String _element_3 = area_1.getElement();
                    _builder.append(_element_3, "\t\t\t");
                    _builder.append("();");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          } else {
            _builder.append("\t\t");
            _builder.append("\t");
            String _switchCompiled = this.switchCompiled();
            _builder.append(_switchCompiled, "\t\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("}\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public String addImport(final String newImport) {
    boolean _contains = this.imports.contains(newImport);
    boolean _not = (!_contains);
    if (_not) {
      this.imports.add(newImport);
    }
    return "";
  }
  
  public String switchCompiled() {
    this.compiled = Boolean.valueOf((!(this.compiled).booleanValue()));
    return "";
  }
  
  public CharSequence compileWindow(final UIDescription description) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.Node;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _addImport_1 = this.addImport("import javafx.scene.Scene;");
    _builder.append(_addImport_1, "");
    _builder.newLineIfNotEmpty();
    String _addImport_2 = this.addImport("import javafx.scene.layout.VBox;");
    _builder.append(_addImport_2, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated by Xtext.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.name, "");
    _builder.append(" extends Scene{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public ");
    _builder.append(this.name, "\t\t");
    _builder.append("(");
    EList<inputType> _inputTypes = description.getInputTypes();
    String _genConstrutorParameter = this.genConstrutorParameter(_inputTypes);
    _builder.append(_genConstrutorParameter, "\t\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(null);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("VBox b = new VBox();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setRoot(b);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("initBox(b);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    CharSequence _genOtherStuff = this.genOtherStuff(description);
    _builder.append(_genOtherStuff, "");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String genConstrutorParameter(final EList<inputType> inputTypes) {
    final StringBuilder parameterBuilder = new StringBuilder();
    for (final inputType input : inputTypes) {
      {
        String _type = input.getType();
        String _plus = (_type + " ");
        String _name = input.getName();
        String _plus_1 = (_plus + _name);
        String _plus_2 = (_plus_1 + ";");
        this.addGlobalVar(_plus_2);
        String _type_1 = input.getType();
        String _plus_3 = (_type_1 + " ");
        String _name_1 = input.getName();
        String _plus_4 = (_plus_3 + _name_1);
        parameterBuilder.append(_plus_4);
        inputType _last = IterableExtensions.<inputType>last(inputTypes);
        boolean _notEquals = (!Objects.equal(input, _last));
        if (_notEquals) {
          parameterBuilder.append(", ");
        }
      }
    }
    return parameterBuilder.toString();
  }
  
  public CharSequence genOtherStuff(final UIDescription description) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _initMainBox = this.getInitMainBox(description);
    _builder.append(_initMainBox, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated interactions.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    CharSequence _genInteractions = this.genInteractions();
    _builder.append(_genInteractions, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated global variables.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    CharSequence _genGlobalVars = this.genGlobalVars();
    _builder.append(_genGlobalVars, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genGlobalVars() {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final String v : this.globalVars) {
        _builder.append("private ");
        _builder.append(v, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genInteractions() {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Interaction i : this.interactions) {
        _builder.append("public void invoke");
        String _name = i.getName();
        _builder.append(_name, "");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        {
          EList<UIAction> _actions = i.getActions();
          for(final UIAction a : _actions) {
            {
              String _type = a.getType();
              boolean _equals = _type.equals("UiAction");
              if (_equals) {
                _builder.append("\t");
                CharSequence _extract = this.extract(((UIAction) a));
                _builder.append(_extract, "\t");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence extract(final UIAction action) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Property> _properties = action.getProperties();
      for(final Property p : _properties) {
        String _uiElementName = action.getUiElementName();
        _builder.append(_uiElementName, "");
        _builder.append(".");
        String _uiElementName_1 = action.getUiElementName();
        CharSequence _methodName = this.methodName(p, _uiElementName_1);
        _builder.append(_methodName, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence methodName(final Property property, final String uiElement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("set");
    String _name = ((CommonProperty) property).getName();
    _builder.append(_name, "");
    _builder.append("(\"");
    String _value = ((CommonProperty) property).getValue();
    _builder.append(_value, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileDefinition(final Definition definition) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ComponentDefinition _concreteDefition = definition.getConcreteDefition();
      String _type = _concreteDefition.getType();
      boolean _equals = _type.equals("Button");
      if (_equals) {
        ComponentDefinition _concreteDefition_1 = definition.getConcreteDefition();
        CharSequence _compileButton = this.compileButton(((ButtonDefinition) _concreteDefition_1));
        _builder.append(_compileButton, "");
        _builder.newLineIfNotEmpty();
      } else {
        ComponentDefinition _concreteDefition_2 = definition.getConcreteDefition();
        String _type_1 = _concreteDefition_2.getType();
        boolean _equals_1 = _type_1.equals("Checkbox");
        if (_equals_1) {
          ComponentDefinition _concreteDefition_3 = definition.getConcreteDefition();
          CharSequence _compileCheckbox = this.compileCheckbox(((CheckboxDefinition) _concreteDefition_3));
          _builder.append(_compileCheckbox, "");
          _builder.newLineIfNotEmpty();
        } else {
          ComponentDefinition _concreteDefition_4 = definition.getConcreteDefition();
          String _type_2 = _concreteDefition_4.getType();
          boolean _equals_2 = _type_2.equals("Radiobox");
          if (_equals_2) {
            ComponentDefinition _concreteDefition_5 = definition.getConcreteDefition();
            CharSequence _compileRadiobox = this.compileRadiobox(((RadioboxDefinition) _concreteDefition_5));
            _builder.append(_compileRadiobox, "");
            _builder.newLineIfNotEmpty();
          } else {
            ComponentDefinition _concreteDefition_6 = definition.getConcreteDefition();
            String _type_3 = _concreteDefition_6.getType();
            boolean _equals_3 = _type_3.equals("MultiSelection");
            if (_equals_3) {
              ComponentDefinition _concreteDefition_7 = definition.getConcreteDefition();
              CharSequence _compileMultiSelection = this.compileMultiSelection(((MultiSelectionDefinition) _concreteDefition_7));
              _builder.append(_compileMultiSelection, "");
              _builder.newLineIfNotEmpty();
            } else {
              ComponentDefinition _concreteDefition_8 = definition.getConcreteDefition();
              CharSequence _compileLabel = this.compileLabel(((LabelDefinition) _concreteDefition_8));
              _builder.append(_compileLabel, "");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    String _switchCompiled = this.switchCompiled();
    _builder.append(_switchCompiled, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileMultiSelection(final MultiSelectionDefinition definition) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import test.JavaFXMultiSelection;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    {
      String _inputType = definition.getInputType();
      boolean _notEquals = (!Objects.equal(_inputType, null));
      if (_notEquals) {
        _builder.append("\t");
        String _inputType_1 = definition.getInputType();
        String _plus = ("import " + _inputType_1);
        String _plus_1 = (_plus + ";");
        String _addImport_1 = this.addImport(_plus_1);
        _builder.append(_addImport_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _inputType_2 = definition.getInputType();
        String _plus_2 = ("JavaFXMultiSelection<" + _inputType_2);
        String _plus_3 = (_plus_2 + "> ");
        String _name = definition.getName();
        String _plus_4 = (_plus_3 + _name);
        String _plus_5 = (_plus_4 + ";");
        String _addGlobalVar = this.addGlobalVar(_plus_5);
        _builder.append(_addGlobalVar, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _name_1 = definition.getName();
        _builder.append(_name_1, "\t");
        _builder.append(" = new JavaFXMultiSelection<");
        String _inputType_3 = definition.getInputType();
        _builder.append(_inputType_3, "\t");
        _builder.append(">();");
        _builder.newLineIfNotEmpty();
        {
          String _selectableValuesLocation = definition.getSelectableValuesLocation();
          boolean _notEquals_1 = (!Objects.equal(_selectableValuesLocation, null));
          if (_notEquals_1) {
            _builder.append("\t");
            String _name_2 = definition.getName();
            _builder.append(_name_2, "\t");
            _builder.append(".setSelectable(");
            String _selectableValuesLocation_1 = definition.getSelectableValuesLocation();
            _builder.append(_selectableValuesLocation_1, "\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            {
              String _selectedValuesLocation = definition.getSelectedValuesLocation();
              boolean _notEquals_2 = (!Objects.equal(_selectedValuesLocation, null));
              if (_notEquals_2) {
                String _name_3 = definition.getName();
                _builder.append(_name_3, "");
                _builder.append(".setSelected(");
                String _selectedValuesLocation_1 = definition.getSelectedValuesLocation();
                _builder.append(_selectedValuesLocation_1, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      } else {
        String _name_4 = definition.getName();
        String _plus_6 = ("JavaFXMultiSelection<?> " + _name_4);
        String _plus_7 = (_plus_6 + ";");
        String _addGlobalVar_1 = this.addGlobalVar(_plus_7);
        _builder.append(_addGlobalVar_1, "");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _name_5 = definition.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append(" = new JavaFXMultiSelection<?>();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("return ");
    String _name_6 = definition.getName();
    _builder.append(_name_6, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileCheckbox(final CheckboxDefinition definition) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.control.CheckBox;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _name = definition.getName();
    String _plus = ("CheckBox " + _name);
    String _plus_1 = (_plus + ";");
    String _addGlobalVar = this.addGlobalVar(_plus_1);
    _builder.append(_addGlobalVar, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_1 = definition.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" = new CheckBox();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_2 = definition.getName();
    _builder.append(_name_2, "\t");
    _builder.append(".setText(\"");
    String _text = definition.getText();
    _builder.append(_text, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    String _name_3 = definition.getName();
    _builder.append(_name_3, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileRadiobox(final RadioboxDefinition definition) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.control.RadioButton;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _name = definition.getName();
    String _plus = ("RadioButton " + _name);
    String _plus_1 = (_plus + ";");
    String _addGlobalVar = this.addGlobalVar(_plus_1);
    _builder.append(_addGlobalVar, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_1 = definition.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" = new RadioButton();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_2 = definition.getName();
    _builder.append(_name_2, "\t");
    _builder.append(".setText(\"");
    String _text = definition.getText();
    _builder.append(_text, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    String _name_3 = definition.getName();
    _builder.append(_name_3, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileTextfield(final TextfieldDefinition definition) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.control.TextField;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _name = definition.getName();
    String _plus = ("TextField " + _name);
    String _plus_1 = (_plus + ";");
    String _addGlobalVar = this.addGlobalVar(_plus_1);
    _builder.append(_addGlobalVar, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_1 = definition.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" = new TextField();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_2 = definition.getName();
    _builder.append(_name_2, "\t");
    _builder.append(".setText(\"");
    String _text = definition.getText();
    _builder.append(_text, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    String _name_3 = definition.getName();
    _builder.append(_name_3, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileLabel(final LabelDefinition definition) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.control.Label;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _name = definition.getName();
    String _plus = ("Label " + _name);
    String _plus_1 = (_plus + ";");
    String _addGlobalVar = this.addGlobalVar(_plus_1);
    _builder.append(_addGlobalVar, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_1 = definition.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" = new Label();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_2 = definition.getName();
    _builder.append(_name_2, "\t");
    _builder.append(".setText(\"");
    String _text = definition.getText();
    _builder.append(_text, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    String _name_3 = definition.getName();
    _builder.append(_name_3, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String addGlobalVar(final String globalVar) {
    boolean _contains = this.globalVars.contains(globalVar);
    boolean _not = (!_contains);
    if (_not) {
      this.globalVars.add(globalVar);
    }
    return "";
  }
  
  public CharSequence compileButton(final ButtonDefinition definition) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.control.Button;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _name = definition.getName();
    String _plus = ("Button " + _name);
    String _plus_1 = (_plus + ";");
    String _addGlobalVar = this.addGlobalVar(_plus_1);
    _builder.append(_addGlobalVar, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_1 = definition.getName();
    _builder.append(_name_1, "\t");
    _builder.append("= new Button();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_2 = definition.getName();
    _builder.append(_name_2, "\t");
    _builder.append(".setText(\"");
    String _text = definition.getText();
    _builder.append(_text, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    {
      Interaction _interaction = definition.getInteraction();
      boolean _notEquals = (!Objects.equal(_interaction, null));
      if (_notEquals) {
        _builder.append("\t");
        String _addImport_1 = this.addImport("import javafx.event.ActionEvent;");
        _builder.append(_addImport_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _addImport_2 = this.addImport("import javafx.event.EventHandler;");
        _builder.append(_addImport_2, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _name_3 = definition.getName();
        _builder.append(_name_3, "\t");
        _builder.append(".setOnAction(new EventHandler<ActionEvent>() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("public void handle(ActionEvent actionEvent) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("invoke");
        Interaction _interaction_1 = ((ButtonDefinition) definition).getInteraction();
        String _name_4 = _interaction_1.getName();
        _builder.append(_name_4, "\t\t\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("});");
        _builder.newLine();
        _builder.append("\t");
        Interaction _interaction_2 = definition.getInteraction();
        String _addInteractionMethod = this.addInteractionMethod(_interaction_2);
        _builder.append(_addInteractionMethod, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("return ");
    String _name_5 = definition.getName();
    _builder.append(_name_5, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String addInteractionMethod(final Interaction interaction) {
    this.interactions.add(interaction);
    return "";
  }
}
