/**
 * generated by Xtext
 */
package org.deg.xtext.gui.generator;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.deg.xtext.gui.guiDSL.ButtonDefinition;
import org.deg.xtext.gui.guiDSL.ComponentDefinition;
import org.deg.xtext.gui.guiDSL.Definition;
import org.deg.xtext.gui.guiDSL.LabelDefinition;
import org.deg.xtext.gui.guiDSL.Type;
import org.deg.xtext.gui.guiDSL.TypeDefinition;
import org.deg.xtext.gui.guiDSL.UIDescription;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class GuiDSLGenerator implements IGenerator {
  private String descriptionname;
  
  private String guiFilename;
  
  private String ipFilename;
  
  private List<String> imports = new ArrayList<String>();
  
  private Boolean compiled = Boolean.valueOf(false);
  
  private Map<String, String> uiElemetsToType = new HashMap<String, String>();
  
  private List<String> globalVars = new ArrayList<String>();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    URI _uRI = resource.getURI();
    String _segment = _uRI.segment(3);
    String[] _split = _segment.split("\\.");
    String _get = _split[0];
    this.descriptionname = _get;
    this.guiFilename = ("Gui" + this.descriptionname);
    this.ipFilename = ("Ip" + this.descriptionname);
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Definition> _filter = Iterables.<Definition>filter(_iterable, Definition.class);
    for (final Definition def : _filter) {
      ComponentDefinition _concreteDefition = def.getConcreteDefition();
      String element = _concreteDefition.getName();
    }
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<UIDescription> _filter_1 = Iterables.<UIDescription>filter(_iterable_1, UIDescription.class);
    for (final UIDescription d : _filter_1) {
      {
        TypeDefinition _typeDefinition = d.getTypeDefinition();
        Type _type = _typeDefinition.getType();
        boolean _equals = _type.equals("WINDOW");
        if (_equals) {
          CharSequence source = this.compileWindow(d);
          String _genImports = this.genImports();
          String _plus = (_genImports + source);
          fsa.generateFile((this.descriptionname + ".java"), _plus);
        } else {
          CharSequence source_1 = this.compileComplex(d);
          String _genImports_1 = this.genImports();
          String _plus_1 = (_genImports_1 + source_1);
          fsa.generateFile((this.descriptionname + ".java"), _plus_1);
        }
        this.imports.clear();
        this.globalVars.clear();
      }
    }
  }
  
  public String genImports() {
    StringBuilder sb = new StringBuilder();
    for (final String import_ : this.imports) {
      StringBuilder _append = sb.append(import_);
      _append.append("\n");
    }
    return sb.toString();
  }
  
  public CharSequence compileComplex(final UIDescription description) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import DE.data_experts.jwammc.core.pf.PfPanel;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated by Xtext.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.guiFilename, "");
    _builder.append(" extends PfPanel{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(this.guiFilename, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super( new BorderLayout() );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("     \t\t\t\t");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("     \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("catch ( Exception e ) {");
    _builder.newLine();
    _builder.append("     \t\t\t\t ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("   \t\t\t\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    CharSequence _initMainBox = this.getInit(description);
    _builder.append(_initMainBox, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated interactions.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    CharSequence _genInteractions = this.genInteractions();
    _builder.append(_genInteractions, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated global variables.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    CharSequence _genGlobalVars = this.genGlobalVars();
    _builder.append(_genGlobalVars, "");
    _builder.newLineIfNotEmpty();
    _builder.append("}\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getInit(final UIDescription description) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public void initBox(VBox b){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public String addImport(final String newImport) {
    boolean _contains = this.imports.contains(newImport);
    boolean _not = (!_contains);
    if (_not) {
      this.imports.add(newImport);
    }
    return "";
  }
  
  public String switchCompiled() {
    this.compiled = Boolean.valueOf((!(this.compiled).booleanValue()));
    return "";
  }
  
  public CharSequence compileWindow(final UIDescription description) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.Node;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _addImport_1 = this.addImport("import javafx.scene.Scene;");
    _builder.append(_addImport_1, "");
    _builder.newLineIfNotEmpty();
    String _addImport_2 = this.addImport("import javafx.scene.layout.VBox;");
    _builder.append(_addImport_2, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated by Xtext.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.descriptionname, "");
    _builder.append(" extends Scene{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public ");
    _builder.append(this.descriptionname, "\t\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(null);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("VBox b = new VBox();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setRoot(b);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("initBox(b);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    CharSequence _genOtherStuff = this.genOtherStuff(description);
    _builder.append(_genOtherStuff, "");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genOtherStuff(final UIDescription description) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _initMainBox = this.getInit(description);
    _builder.append(_initMainBox, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated interactions.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    CharSequence _genInteractions = this.genInteractions();
    _builder.append(_genInteractions, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Generated global variables.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    CharSequence _genGlobalVars = this.genGlobalVars();
    _builder.append(_genGlobalVars, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genGlobalVars() {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final String v : this.globalVars) {
        _builder.append("private ");
        _builder.append(v, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genInteractions() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("//\tdef extract(UIAction action) ");
    return _builder;
  }
  
  public CharSequence compileDefinition(final Definition definition) {
    StringConcatenation _builder = new StringConcatenation();
    String _switchCompiled = this.switchCompiled();
    _builder.append(_switchCompiled, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileLabel(final LabelDefinition definition) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.control.Label;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _name = definition.getName();
    String _plus = ("Label " + _name);
    String _plus_1 = (_plus + ";");
    String _addGlobalVar = this.addGlobalVar(_plus_1);
    _builder.append(_addGlobalVar, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_1 = definition.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" = new Label();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    String _name_2 = definition.getName();
    _builder.append(_name_2, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String addGlobalVar(final String globalVar) {
    boolean _contains = this.globalVars.contains(globalVar);
    boolean _not = (!_contains);
    if (_not) {
      this.globalVars.add(globalVar);
    }
    return "";
  }
  
  public CharSequence compileButton(final ButtonDefinition definition) {
    StringConcatenation _builder = new StringConcatenation();
    String _addImport = this.addImport("import javafx.scene.control.Button;");
    _builder.append(_addImport, "");
    _builder.newLineIfNotEmpty();
    String _name = definition.getName();
    String _plus = ("Button " + _name);
    String _plus_1 = (_plus + ";");
    String _addGlobalVar = this.addGlobalVar(_plus_1);
    _builder.append(_addGlobalVar, "");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_1 = definition.getName();
    _builder.append(_name_1, "\t");
    _builder.append("= new Button();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    String _name_2 = definition.getName();
    _builder.append(_name_2, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
